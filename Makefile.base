# mode: -*- makefile -*-
#__INSERT_LICENSE__
#$Id: Makefile.base,v 1.216.10.2 2007/02/20 18:30:44 dalcinl Exp $

#p [in Makefile.base]
#s General

######  begin of CONGIGURATION VARIABLES section  ####################

#  Configure this variable!! (either g_c++ or O_c++) 
#BOPT =

ifeq ($(BOPT),)
BOPT = g_c++
endif
export BOPT

# uncomment in order to use the `gprof' profiler
# PROF_FLAGS = -pg

# Other configuration variables are in `Makefile.defs', but normally
# they are set only when you first install PETSc-FEM, so the best is
# to put `Makefile.defs' in the directory inmediately above PETSc-FEM
# directory and then if you install another version of PETSc-FEM, the
# settings will be seen immediately by the new version. A version of
# `Makefile.defs' is included in the PETSc-FEM directory, copy it to
# the directory _above_ the PETSC-FEM directory and configure the
# variables inside.
include $(PETSCFEM_DIR)/Makefile.defs
# include ../Makefile.defs

######  end of CONGIGURATION VARIABLES section  ####################


# This allows to specify whether optimized version (compiler -O2
# flag) or the debugger version (compiler -g flag) should be generated
# in separate libraries
ifeq ($(USE_SEPARATE_COMPILATION),)
USE_SEPARATE_COMPILATION = yes
endif
GNU_C_COMPILER = gcc -fPIC  # gcc or egcs

# From version beta-3.04 on, PETSc-FEM must be compiled with a
# specific version of PETSc. If you work with different versions of
# PETSc-FEM, then you probably need to have several versions of PETSc
# compiled.  In this case, you put all the versions in a directory pointed by
# `PETSC_ROOT_DIR' and  versions of PETSc-FEM newer than beta-3.04 will
# specify the version of PETSc needed through the variable
# `PETSC_VERSION_USED_BY_PETSCFEM' and define their own `PETSC_DIR' variable. 

export PETSCFEM_DIR

#export LD_LIBRARY_PATH=$(PETSC_DIR)/lib/$(PETSC_ARCH):$(PETSC_DIR)/$(PETSC_ARCH)/lib


ifeq ($(BOPT),O_c++) 
opt_level = O
osfx = _O
else
opt_level = g
osfx = _g
endif

ifeq ($(USE_SEPARATE_COMPILATION),)
osfx =
endif

ifeq ($(GNUCXX),)
GNUCXX = g++
endif

CFLAGS	         =
FFLAGS	         = 

BISON = bison -d

ifeq ($(TAGINCL),)
TAGINCL = --etags-include
endif

## MPICH
ifneq ($(MPI_DIR),)
MPI_CPPFLAGS = -DMPICH_IGNORE_CXX_SEEK -I$(MPI_INC_DIR)
MPI_LDFLAGS  = -Wl,-rpath,$(MPI_LIB_DIR) -L$(MPI_LIB_DIR) -l$(MPI_LIBNAME)
endif

## PETSc
ifeq ($(BOPT),g_c++)
ifneq ($(PETSC_ARCH_G),)
PETSC_ARCH=$(PETSC_ARCH_G)
endif
endif
ifeq ($(BOPT),O_c++) 
ifneq ($(PETSC_ARCH_O),)
PETSC_ARCH=$(PETSC_ARCH_O)
endif
endif
ifeq ($(PETSC_ARCH),)
PETSC_ARCH=linux-gnu-$(BOPT)
endif
ifneq ($(PETSC_DEV),)
include ${PETSC_DIR}/conf/base
else
include ${PETSC_DIR}/bmake/common/base
endif
PACKAGES_INCLUDES = ${MPI_INCLUDE} ${X11_INCLUDE} ${BLASLAPACK_INCLUDE}
PACKAGES_LIBS     = ${MPI_LIB} ${X11_LIB} ${BLASLAPACK_LIB}

PETSC_CPPFLAGS = ${PETSC_INCLUDE}
PETSC_LDFLAGS  = ${PETSC_KSP_LIB}

## ANN
ifneq ($(ANN),)
ANN_CPPFLAGS = -DUSE_ANN -I$(ANN_INC_DIR)
ANN_LDFLAGS  = $(ANN_LIB_DIR)/lib$(ANN_LIBNAME).a
#ANN_LDFLAGS  = -L$(ANN_LIB_DIR) -l$(ANN_LIBNAME)
endif

## GLIB
GLIB_CPPFLAGS = -I$(GLIB_INC_DIR) -I$(GLIB_INC_CFG)
GLIB_LDFLAGS  = -Wl,-rpath,$(GLIB_LIB_DIR) -L$(GLIB_LIB_DIR) -l$(GLIB_LIBNAME)

## LIBRETTO
ifneq ($(LIBRETTO),)
LIBRETTO_CPPFLAGS = -I$(LIBRETTO_INC_DIR)
LIBRETTO_LDFLAGS  = $(LIBRETTO_LIB_DIR)/lib$(LIBRETTO_LIBNAME).a
#LIBRETTO_LDFLAGS  = -Wl,-rpath,$(LIBRETTO_LIB_DIR) -L$(LIBRETTO_LIB_DIR) -l$(LIBRETTO_LIBNAME)
endif

## MESCHACH
ifneq ($(MESCHACH),)
MESCHACH_CPPFLAGS = -I$(MESCHACH_INC_DIR)
MESCHACH_LDFLAGS  = $(MESCHACH_LIB_DIR)/lib$(MESCHACH_LIBNAME).a
#MESCHACH_LDFLAGS  = -L$(MESCHACH_LIB_DIR) -l$(MESCHACH_LIBNAME)
endif

## METIS
ifneq ($(METIS),)
METIS_CPPFLAGS = -I$(METIS_INC_DIR)
METIS_LDFLAGS  = $(METIS_LIB_DIR)/lib$(METIS_LIBNAME).a
#METIS_LDFLAGS  = -L$(METIS_LIB_DIR) -l$(METIS_LIBNAME)
endif

## NEWMAT
ifneq ($(NEWMAT),)
NEWMAT_CPPFLAGS = -I$(NEWMAT_INC_DIR)
NEWMAT_LDFLAGS  = $(NEWMAT_LIB_DIR)/lib$(NEWMAT_LIBNAME).a
#NEWMAT_LDFLAGS  = -L$(NEWMAT_LIB_DIR) -l$(NEWMAT_LIBNAME)
endif

## SSL
ifneq ($(SSL),)
SSL_CPPFLAGS =  -DUSE_SSL -I$(SSL_INC_DIR)
SSL_LDFLAGS  = $(SSL_LIB_DIR)/lib$(SSL_LIBNAME).a
#SSL_LDFLAGS  = -L$(SSL_LIB_DIR) -lib$(SSL_LIBNAME)
endif

## SUPERLU
ifneq ($(SUPERLU),)
SUPERLU_CPPFLAGS =  -DUSE_SUPERLU -I$(SUPERLU_INC_DIR)
SUPERLU_LDFLAGS  = $(SUPERLU_LIB_DIR)/lib$(SUPERLU_LIBNAME).a
#SUPERLU_LDFLAGS  = -L$(SUPERLU_LIB_DIR) -lib$(SUPERLU_LIBNAME)
endif



# here goes -frepo if needed
# CPPFLAGS := -frepo $(PROF_FLAGS)

CPPFLAGS := 					\
	$(WARN_FLAGS)				\
	$(PROF_FLAGS)        			\
	$(MPI_CPPFLAGS)				\
	$(PETSC_CPPFLAGS)			\
	-I$(PETSCFEM_DIR) 			\
	$(GLIB_CPPFLAGS)		        \
	$(LIBRETTO_CPPFLAGS)			\
	$(MESCHACH_CPPFLAGS)	        	\
	$(NEWMAT_CPPFLAGS)	        	\
	$(METIS_CPPFLAGS)			\
	$(ANN_CPPFLAGS)			        \
	$(SSL_CPPFLAGS)				\
	$(SUPERLU_CPPFLAGS)			\

ifeq ($(USE_DYNAMICALLY_LOADED_EXTENDED_FUNCTIONS),yes) 
CPPFLAGS += -DUSE_DLEF
endif

ifneq ($(SSL),)
ifeq ($(USE_DX),)
USE_DX := yes
endif
else
USE_DX := no
endif

ifeq ($(USE_DX),yes)
CPPFLAGS += -DUSE_DX
endif

ifeq ($(USE_PTHREADS),yes)
PTHREADS_I_STRIPPED := $(strip $(PTHREADS_I))
CPPFLAGS += -DUSE_PTHREADS 
ifneq ($(PTHREADS_I_STRIPPED),)
CPPFLAGS += -I$(PTHREADS_I_STRIPPED)
endif
else
PTHREADS_LIB :=
endif

FPPFLAGS =

LIBPETSCFEM = $(PETSCFEM_DIR)/src/libpetscfem$(osfx).a
#SHARFILE = $(HOME_GERONIMO)/PETSC/source.shar
TARFILE = $(PETSCFEM_DIR)/../source

APPDIR = $(PETSCFEM_DIR)/applications

ODOC = $(PETSCFEM_DIR)/tools/odoc.pl
DOC_DIR = $(PETSCFEM_DIR)/doc

INSERT_LICENSE = $(PETSCFEM_DIR)/tools/insert_license.pl

OCTAVE = octave -qH
EPERL = $(PETSCFEM_DIR)/tools/eperl

PETSCFEM_VERSION := $(shell cat $(PETSCFEM_DIR)/VERSION)

.PHONY: tags lclean general_clean force libpetscfem depend local_depend

#w Build the library
libpetscfem: force 
	$(MAKE) -C $(PETSCFEM_DIR)/src compile

local_depend: force 	
ifneq ($(SRCS),)	
	${CXX} -MM  ${CFLAGS} ${CCPPFLAGS} $(SRCS) > makefile.d
endif

#w Creates the dependency file makefile.d
depend: local_depend force
ifneq ($(DEPEND_DIRS),)
	for dir in $(DEPEND_DIRS) ; \
		do $(MAKE) -C $$dir depend ;\
	done
endif

ifeq ($(ETAGS),GNU)
TAGFLAGS := --regex='/.*[^a-zA-Z0-9_]\([a-zA-Z0-9][a-zA-Z0-9_]*\) *:=/\1/' 
endif
TAGS: force
ifneq ($(SRCS),)
	etags $(TAGFLAGS) *.cpp *.h 
endif

#w Create preprocessed files
%.cppi: %.cpp force
	if [ -e $@ ] ; then chmod +w $@ ; fi
	g++ -E $(CFLAGS) $(CPPFLAGS) $< > $@ ; chmod u-w $@

#w Create preprocessed files
%.hi: %.h force
	if [ -e $@ ] ; then chmod +w $@ ; fi
	g++ -E $(CFLAGS) $(CPPFLAGS) $< > $@ ; chmod u-w $@

#w Extension functions
%.efn: %.o
	${CXX_CLINKER} -g -shared -Wl$(EFN_LIBRARY_PATH) -o $@ $< $(EFN_LDFLAGS)

#w Guile snarfer files
%.x: %.cpp
	guile-snarf -o $@ $(CPPFLAGS) $<

# Create preprocessed files
print_cppflags_for_emacs_macro_expansion: 
	@echo $(CFLAGS) $(CPPFLAGS)

# general elements to be removed in all cases.
general_clean: 
#	cat /dev/null >makefile.d
	$(MAKE) clean

local_clean::
	-@rm -f *~ *.o $(OBJS) $(PROG_BIN)			\
		octave-core *.cppi				\
		outvector.sal *.sal *.out TAGS makefile.d	\
		leak.out.* &> /dev/null				\
		*.efn *.a *.bin *.gpl \"\"
	for link in * ; do if [ -L $$link ] ; then rm $$link ; fi ; done

local_dist_clean::

#w cleans directory
lclean: 
	$(MAKE) clean local_clean &> /dev/null
ifneq ($(CLEAN_DIRS),)
	for dir in $(CLEAN_DIRS) ; do $(MAKE) -C $$dir lclean  ; done
endif

#w Builds all necessary things after checking out a version
#w from the CVS repository
sw: 
	$(MAKE) local_sw
ifneq ($(SWDIRS),)
	for dir in $(SWDIRS) ; do $(MAKE) -C $$dir sw  ; done
endif

local_sw::

#w cleans directory for distribution (leaves some files)
distclean: 
	$(MAKE) clean local_dist_clean &> /dev/null
	for dir in $(CLEAN_DIRS) ; do $(MAKE) -C $$dir distclean  ; done

## PETSc Libraries used by most PETSc-FEM applications
#PETSCFEM_PETSC_LIBS := ${PETSC_KSP_LIB}

LD_LIBRARY_PATH += -Wl,-rpath -Wl,$(MPI_DIR)/lib
MPI_LDFLAGS := -lmpichcxx -lmpich -lpthread -lrt

LDFLAGS = -Wl,-E,-rpath,$(LD_LIBRARY_PATH)	\
          $(PROG_LIB)				\
	  $(PTHREADS_LIB)			\
	  -L$(PETSCFEM_DIR)/src			\
	  -lpetscfem$(osfx)   			\
          $(PROG_LIB)				\
          -lpetscfem$(osfx) -lc			\
	  $(MPI_LDFLAGS)			\
          $(ANN_LDFLAGS) 			\
          $(GLIB_LDFLAGS)			\
	  $(LIBRETTO_LDFLAGS)  			\
          $(MESCHACH_LDFLAGS)			\
          $(METIS_LDFLAGS) 			\
          $(NEWMAT_LDFLAGS)			\
          $(SSL_LDFLAGS) 			\
          $(SUPERLU_LDFLAGS) 			\
	  $(SSL_LDFLAGS)			\
	  $(PETSC_LDFLAGS)			\
          $(MPI_LDFLAGS) 			\

LDFLAGS_NO_PROG_LIB =					\
	  $(PTHREADS_LIB)				\
	  -L$(PETSCFEM_DIR)/src	-lpetscfem$(osfx) -lc	\
          $(ANN_LDFLAGS)				\
          $(GLIB_LDFLAGS)				\
          $(LIBRETTO_LDFLAGS)				\
	  $(MESCHACH_LDFLAGS)				\
          $(METIS_LDFLAGS)				\
	  $(NEWMAT_LDFLAGS)				\
	  $(SSL_LDFLAGS)				\
          $(SUPERLU_LDFLAGS)				\
	  $(PETSC_LDFLAGS)				\
          $(MPI_LDFLAGS)                                \

EFN_LDFLAGS =	

PROG_LIB = lib$(PROG)$(osfx).a

.INTERMEDIATE: $(LIBOBJS)
$(PROG_LIB): $(PROG_LIB)($(LIBOBJS))
	ranlib $@

$(PROG_LIB)(%.o): %.o
	ar ru $@ $<
	-rm -f $<

PROG_BIN = $(PROG)$(osfx).bin

$(PROG): $(PROG_bin)

# general program 
#compdate.cpp: compdate.cppin
#	perl -pe 's/__DATE__/'`date date --iso-8601=seconds`'/' \
#		< compdate.cppin > compdate.cpp

$(PROG_BIN): $(MYOBJS) $(PROG_LIB) $(PROGOBJ) $(LIBPETSCFEM)
	if [ -e $@ ] ; then rm $@ ; fi
	$(MAKE) -W compdate.cpp compdate.o
	$(MAKE) -C $(PETSCFEM_DIR)/src -W version.cpp version.o
	${CXX_CLINKER} $(PROF_FLAGS) -o $@ $(PROGOBJ) $(PETSCFEM_DIR)/src/version.o $(MYOBJS) $(OTHER_OBJS) $(LDFLAGS)
	rm $(PROGOBJ)

$(LIBPETSCFEM)(%.o): force
	$(MAKE) -C $(PETSCFEM_DIR)/src 'libpetscfem$(osfx).a($*.o)'

# %$(osfx).o: %.cpp
#	-${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<

#
# When using ePerl the convention is to use .epl extension for the
# files previous to preprocessing and .depl for the preprocessed files 
#
EPERLFLAGS = 
#w Builds <file>.depl from <file>.epl using ePerl
#e <file>.depl
%.depl: %.epl
	if [ -e $@ ] ; then chmod +w $@ ; rm $@ ; fi
	$(EPERL) -P $(EPERLFLAGS) $< > $@
	chmod -w $@

#w make ePerl script
#e <file>.epls
%.epls: %.epl
	if [ -e $@ ] ; then chmod +w $@ ; rm $@ ; fi
	$(EPERL) -xP -$(EPERLFLAGS) $< > $@
	chmod -w $@

%: %.epl
	if [ -e $@ ] ; then chmod +w $@ ; rm $@ ; fi
	$(EPERL) -P $(EPERLFLAGS) $< > $@
	chmod -w $@

# This line _should_ be here but I don't know why if
# I put it, then the targets don't work!!
#.PHONY: ns.link advdif.link adv.link laplace.link all.link

#w makes local links to all binaries 
all_link: ns.link advdif.link adv.link laplace.link

BIN = $(LNK)/$(LNK).bin
ns.link:		LNK=ns
advdif.link:		LNK=advdif
adv.link:		LNK=adv
adv.link:		BIN=advective/adv.bin
laplace.link:		LNK=laplace

#w makes local link to binary, for instance adv.bin
#e <file>.link
%.link: 
	if [ ! -L $(LNK) ] ; then ln -s $(APPDIR)/$(BIN) $(LNK) ; fi

#w Generates compressed ps
%.ps.gz: %.ps
	gzip -qf $<

#
# For running odoc.pl (documenting PETSc-FEM options)
#
define run_odoc
-chmod +w $@
$(ODOC) -o $@ $<
-chmod -w $@
endef

ifeq (makefile.d,$(wildcard makefile.d)) 
include makefile.d
endif

# Append Makefile's to this variable if you want to be
# scanned for targets with 'makewhat'
OMKFLS = $(PETSCFEM_DIR)/Makefile.base

#w Prints all main targets for 'make' along with a brief description
what:
	@$(PETSCFEM_DIR)/tools/makewhat.pl -s Makefile $(OMKFLS)

auxi:
	ln -sf $(PROG) $(LOC_PROG)
	echo file $(LOC_PROG) >.gdbinit
	echo set args -case $(CASE_NAME).depl >>.gdbinit

petscfem.prof: gmon.out
	@if [ -e gmon.out ] ; then echo "running gprof..." ; \
		gprof $(PROG) gmon.out >$@ ; fi

gprof: petscfem.prof

compdate.o: CPPFLAGS += "-DPETSCFEM_HOSTNAME=\"$(shell uname -a)\""

compdate.cpp:
	perl -pe 's/__MODULE__/$(PETSCFEM_MODULE)/' < $(PETSCFEM_DIR)/tools/compdate.cppin > $@


CXX := g++ -fPIC
CXX_CLINKER := ${CXX}

ifeq ($(BOPT),O_c++)
COPTFLAGS := -DNDEBUG -O3 -funroll-loops
else
COPTFLAGS := -g3
endif

%.o: %.cpp
	$(CXX) -c -o $@ ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
