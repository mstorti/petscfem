# mode: -*- makefile -*-
#__INSERT_LICENSE__
#$Id: Makefile.base,v 1.30 2001/05/12 22:33:16 mstorti Exp $

#p [in Makefile.base]
#s General

######  begin of CONGIGURATION VARIABLES section  ####################
#  Configure this variable!! (either g_c++ or O_c++) 
BOPT = g_c++

GNU_C_COMPILER = gcc  # gcc or egcs

# uncomment in order to use the `gprof' profiler
#PROF_FLAGS = -pg

# read variables from file
include $(PETSCFEM_DIR)/../Makefile.defs
######  end of CONGIGURATION VARIABLES sectio  ####################

export PETSCFEM_DIR

GNUCXX = g++  # it can be also egcs++. You need to have compat-egcs and
	      # compat-egcs++ installed

CFLAGS	         =
FFLAGS	         = 

ifdef RH60
   RH60 = -DRH60
endif

BISON = bison -d
TAGINCL = --etags-include

CPPFLAGS         = $(PROF_FLAGS) $(RH60) ${BS_INCLUDE} -I$(GLIB) -I$(NEWMAT) \
                     -I$(METIS)/Lib \
                    -I$(PETSCFEM_DIR)/src -I$(MESCHACH) \
                    -I$(LIBRETTO_I) -I$(ANN_HOME)/include
FPPFLAGS         =

LIBPETSCFEM = $(PETSCFEM_DIR)/src/libpetscfem.a
#SHARFILE = $(HOME_GERONIMO)/PETSC/source.shar
TARFILE = $(PETSCFEM_DIR)/../source

APPDIR = $(PETSCFEM_DIR)/applications

ODOC = $(PETSCFEM_DIR)/tools/odoc.pl

INSERT_LICENSE = $(PETSCFEM_DIR)/tools/insert_license.pl

OCTAVE = octave

include ${PETSC_DIR}/bmake/${PETSC_ARCH}/base

.PHONY: tags lclean general_clean force libpetscfem depend local_depend

#w Build the library
libpetscfem: force 
	$(MAKE) -C $(PETSCFEM_DIR)/src compile

local_depend: force 
ifneq ($(SRCS),)
	${CXX} -M  ${CFLAGS} ${CCPPFLAGS} $(SRCS) > makefile.d
endif

#w Creates the dependency file makefile.d
depend: local_depend force
ifneq ($(DEPEND_DIRS),)
	for dir in $(DEPEND_DIRS) ; \
		do $(MAKE) -C $$dir depend ;\
	done
endif

TAGS: $(SRCS)
ifneq ($(SRCS),)
	etags *.cpp *.h $(TAGFLAGS)
endif

# Create preprocessed files
%.cppi: %.cpp force
	if [ -e $@ ] ; then chmod +w $@ ; fi
	g++ -E $(CFLAGS) $(CPPFLAGS) $< > $@ ; chmod u-w $@

# general elements to be removed in all cases.
general_clean: 
#	cat /dev/null >makefile.d
	$(MAKE) clean

local_clean:: 
	-@rm -f *~ *.o $(OBJS) $(PROG).bin octave-core *.cppi \
		outvector.sal *.sal *.out TAGS makefile.d &> /dev/null
	for link in * ; do if [ -L $$link ] ; then rm $$link ; fi ; done

local_dist_clean::

#w cleans directory
lclean: 
	$(MAKE) clean local_clean &> /dev/null
	for dir in $(CLEAN_DIRS) ; do $(MAKE) -C $$dir lclean  ; done

#w Builds all necessary things after checking out a version
#w from the CVS repository
sw: 
	$(MAKE) local_sw
	for dir in $(SWDIRS) ; do $(MAKE) -C $$dir sw  ; done

local_sw::

#w cleans directory for distribution (leaves some files)
distclean: 
	$(MAKE) clean local_dist_clean &> /dev/null
	for dir in $(CLEAN_DIRS) ; do $(MAKE) -C $$dir distclean  ; done

LDFLAGS = -L$(PETSCFEM_DIR)/src -lpetscfem \
                -L$(METIS) -L/usr/local/lib \
                -lmetis  -L$(NEWMAT)  -lnewmat \
		-lglib -L$(LIBRETTO_LIB) -libretto \
		-lANN -L$(ANN_HOME)/lib \
		-lc ${PETSC_SLES_LIB} \
		$(MESCHACH)/libmes.a

# general program 
$(PROG).bin: $(MYOBJS) $(LIBPETSCFEM) 
	-rm $@
	${CXX_CLINKER} $(PROF_FLAGS) -o $@ $(MYOBJS) $(OTHER_OBJS) $(LDFLAGS)

#
# When using ePerl the convention is to use .epl extension for the
# files previous to preprocessing and .depl for the preprocessed files 
#
EPERLFLAGS = 
#w Builds <file>.depl from <file>.epl using ePerl
#e <file>.depl
%.depl: %.epl
	if [ -e $@ ] ; then chmod +w $@ ; rm $@ ; fi
	eperl -P $(EPERLFLAGS) $< > $@
	chmod -w $@

%: %.epl
	if [ -e $@ ] ; then chmod +w $@ ; rm $@ ; fi
	eperl -P $(EPERLFLAGS) $< > $@
	chmod -w $@

# This line _should_ be here but I don't know why if
# I put it, then the targets don't work!!
#.PHONY: ns.link advdif.link adv.link laplace.link all.link

#w makes local links to all binaries 
all_link: ns.link advdif.link adv.link laplace.link

BIN = $(LNK)/$(LNK).bin
ns.link:		LNK=ns
advdif.link:		LNK=advdif
adv.link:		LNK=adv
adv.link:		BIN=advective/adv.bin
laplace.link:		LNK=laplace

#w makes local link to binary, for instance adv.bin
#e <file>.link
%.link: 
	if [ ! -L $(LNK) ] ; then ln -s $(APPDIR)/$(BIN) $(LNK) ; fi

#w Generates compressed ps
%.ps.gz: %.ps
	gzip -qf $<

#
# For running odoc.pl (documenting PETSc-FEM options)
#
define run_odoc
-chmod +w $@
$(ODOC) -o $@ $<
-chmod -w $@
endef

ifeq (makefile.d,$(wildcard makefile.d)) 
include makefile.d
endif

# Append Makefile's to this variable if you want to be
# scanned for targets with 'makewhat'
OMKFLS = $(PETSCFEM_DIR)/Makefile.base

#w Prints all main targets for 'make' along with a brief description
what:
	@$(PETSCFEM_DIR)/tools/makewhat.pl -s Makefile $(OMKFLS)
