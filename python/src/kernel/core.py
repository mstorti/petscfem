# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

import _core
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_PySwigIterator
    def value(*args): return _core.PySwigIterator_value(*args)
    def incr(*args): return _core.PySwigIterator_incr(*args)
    def decr(*args): return _core.PySwigIterator_decr(*args)
    def distance(*args): return _core.PySwigIterator_distance(*args)
    def equal(*args): return _core.PySwigIterator_equal(*args)
    def copy(*args): return _core.PySwigIterator_copy(*args)
    def next(*args): return _core.PySwigIterator_next(*args)
    def previous(*args): return _core.PySwigIterator_previous(*args)
    def advance(*args): return _core.PySwigIterator_advance(*args)
    def __eq__(*args): return _core.PySwigIterator___eq__(*args)
    def __ne__(*args): return _core.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _core.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _core.PySwigIterator___isub__(*args)
    def __add__(*args): return _core.PySwigIterator___add__(*args)
    def __sub__(*args): return _core.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _core.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class Comm(object):
    """Proxy of C++ Comm class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_Comm
    def __init__(self, *args): 
        """
        __init__(self) -> Comm
        __init__(self, comm) -> Comm
        Parameters:
           comm: Comm instance

        __init__(self, comm) -> Comm
        Parameters:
           comm: MPI_Comm value

        """
        _core.Comm_swiginit(self,_core.new_Comm(*args))
    def __eq__(*args):
        """
        __eq__(self, comm) -> bool
        Parameters:
           comm: MPI_Comm value

        """
        return _core.Comm___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, comm) -> bool
        Parameters:
           comm: MPI_Comm value

        """
        return _core.Comm___ne__(*args)

    def getSize(*args):
        """getSize(self) -> int"""
        return _core.Comm_getSize(*args)

    def getRank(*args):
        """getRank(self) -> int"""
        return _core.Comm_getRank(*args)

    size = _swig_property(_core.Comm_size_get)
    rank = _swig_property(_core.Comm_rank_get)
Comm_swigregister = _core.Comm_swigregister
Comm_swigregister(Comm)

class Object(object):
    """Proxy of C++ Object class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def __eq__(*args):
        """
        __eq__(self, obj) -> bool
        Parameters:
           obj: Object instance

        """
        return _core.Object___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, obj) -> bool
        Parameters:
           obj: Object instance

        """
        return _core.Object___ne__(*args)

    __allrefs__ = staticmethod(_core.Object___allrefs__)
    def __refcount__(*args): return _core.Object___refcount__(*args)
Object_swigregister = _core.Object_swigregister
Object_swigregister(Object)
Object___allrefs__ = _core.Object___allrefs__

class Options(Object):
    """Proxy of C++ Options class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_Options
    def __init__(self, *args): 
        """
        __init__(self) -> Options
        __init__(self, options) -> Options
        Parameters:
           options: Options instance

        __init__(self, options) -> Options
        Parameters:
           options: dict instance

        """
        _core.Options_swiginit(self,_core.new_Options(*args))
    GLOBALS = _swig_property(_core.Options_GLOBALS_get, _core.Options_GLOBALS_set)
    def __contains__(*args):
        """
        __contains__(self, key) -> bool
        Parameters:
           key: string value

        """
        return _core.Options___contains__(*args)

    def __getitem__(*args):
        """
        __getitem__(self, key) -> string
        Parameters:
           key: string value

        __getitem__(self, key, defval) -> string
        Parameters:
           key: string value
           defval: string value

        """
        return _core.Options___getitem__(*args)

    def __setitem__(*args):
        """
        __setitem__(self, key, value)
        Parameters:
           key: string value
           value: string value

        """
        return _core.Options___setitem__(*args)

    def __delitem__(*args):
        """
        __delitem__(self, key)
        Parameters:
           key: string value

        """
        return _core.Options___delitem__(*args)

    def add(*args):
        """
        add(self, options)
        Parameters:
           options: dict instance

        """
        return _core.Options_add(*args)

    def update(*args):
        """
        update(self, options)
        Parameters:
           options: dict instance

        """
        return _core.Options_update(*args)

    def __len__(*args):
        """__len__(self) -> int"""
        return _core.Options___len__(*args)

    def clear(*args):
        """clear(self)"""
        return _core.Options_clear(*args)

    def todict(*args):
        """todict(self) -> dict"""
        return _core.Options_todict(*args)

Options_swigregister = _core.Options_swigregister
Options_swigregister(Options)
cvar = _core.cvar

class DTableI(Object):
    """Proxy of C++ DTableI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_DTableI
    def __init__(self, *args): 
        """
        __init__(self) -> DTableI
        __init__(self, t) -> DTableI
        Parameters:
           t: DTable<int> instance

        __init__(self, rows, cols) -> DTableI
        Parameters:
           rows: int value
           cols: int value

        __init__(self, array) -> DTableI
        Parameters:
           array: int const [] value

        """
        _core.DTableI_swiginit(self,_core.new_DTableI(*args))
    def getSize(*args):
        """getSize(self) -> int"""
        return _core.DTableI_getSize(*args)

    def getShape(*args):
        """getShape(self) -> (int, int)"""
        return _core.DTableI_getShape(*args)

    def getArray(*args):
        """getArray(self) -> __dummy_7__"""
        return _core.DTableI_getArray(*args)

    __array_interface__ = _swig_property(_core.DTableI___array_interface___get, _core.DTableI___array_interface___set)
DTableI_swigregister = _core.DTableI_swigregister
DTableI_swigregister(DTableI)

class DTableS(Object):
    """Proxy of C++ DTableS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_DTableS
    def __init__(self, *args): 
        """
        __init__(self) -> DTableS
        __init__(self, t) -> DTableS
        Parameters:
           t: DTable<double> instance

        __init__(self, rows, cols) -> DTableS
        Parameters:
           rows: int value
           cols: int value

        __init__(self, array) -> DTableS
        Parameters:
           array: double const [] value

        """
        _core.DTableS_swiginit(self,_core.new_DTableS(*args))
    def getSize(*args):
        """getSize(self) -> int"""
        return _core.DTableS_getSize(*args)

    def getShape(*args):
        """getShape(self) -> (int, int)"""
        return _core.DTableS_getShape(*args)

    def getArray(*args):
        """getArray(self) -> std::vector<(double,std::allocator<(double)>)>"""
        return _core.DTableS_getArray(*args)

    __array_interface__ = _swig_property(_core.DTableS___array_interface___get, _core.DTableS___array_interface___set)
DTableS_swigregister = _core.DTableS_swigregister
DTableS_swigregister(DTableS)

class PTableI(Object):
    """Proxy of C++ PTableI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_PTableI
    def __init__(self, *args): 
        _core.PTableI_swiginit(self,_core.new_PTableI(*args))
    def getSize(*args): return _core.PTableI_getSize(*args)
    def getShape(*args): return _core.PTableI_getShape(*args)
    def getArray(*args): return _core.PTableI_getArray(*args)
    def getFields(*args): return _core.PTableI_getFields(*args)
    __array_interface__ = _swig_property(_core.PTableI___array_interface___get, _core.PTableI___array_interface___set)
PTableI_swigregister = _core.PTableI_swigregister
PTableI_swigregister(PTableI)

class PTableS(Object):
    """Proxy of C++ PTableS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_PTableS
    def __init__(self, *args): 
        _core.PTableS_swiginit(self,_core.new_PTableS(*args))
    def getSize(*args): return _core.PTableS_getSize(*args)
    def getShape(*args): return _core.PTableS_getShape(*args)
    def getArray(*args): return _core.PTableS_getArray(*args)
    def getFields(*args): return _core.PTableS_getFields(*args)
    __array_interface__ = _swig_property(_core.PTableS___array_interface___get, _core.PTableS___array_interface___set)
PTableS_swigregister = _core.PTableS_swigregister
PTableS_swigregister(PTableS)

class Elemset(Object):
    """Proxy of C++ Elemset class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_Elemset
    def __init__(self, *args): 
        """
        __init__(self, type) -> Elemset
        Parameters:
           type: string value

        __init__(self, type, icone) -> Elemset
        Parameters:
           type: string value
           icone: DTable<int> instance

        __init__(self, type, icone, options) -> Elemset
        Parameters:
           type: string value
           icone: DTable<int> instance
           options: Options instance

        """
        _core.Elemset_swiginit(self,_core.new_Elemset(*args))
    def getType(*args):
        """getType(self) -> string"""
        return _core.Elemset_getType(*args)

    def getOptions(*args):
        """getOptions(self) -> Options"""
        return _core.Elemset_getOptions(*args)

    def setOptions(*args):
        """
        setOptions(self, options)
        Parameters:
           options: Options instance

        """
        return _core.Elemset_setOptions(*args)

    def getData(*args):
        """getData(self) -> DTableI"""
        return _core.Elemset_getData(*args)

    def setData(*args):
        """
        setData(self, conntable)
        Parameters:
           conntable: DTable<int> instance

        """
        return _core.Elemset_setData(*args)

    def setPTable(*args): return _core.Elemset_setPTable(*args)
    def getPTableI(*args): return _core.Elemset_getPTableI(*args)
    def getPTableS(*args): return _core.Elemset_getPTableS(*args)
Elemset_swigregister = _core.Elemset_swigregister
Elemset_swigregister(Elemset)

class Mesh(Object):
    """Proxy of C++ Mesh class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_Mesh
    def getNodedata(*args):
        """getNodedata(self) -> DTableS"""
        return _core.Mesh_getNodedata(*args)

    def setNodedata(*args):
        """
        setNodedata(self, nodedata)
        Parameters:
           nodedata: DTable<double> instance

        """
        return _core.Mesh_setNodedata(*args)

    def getField(*args): return _core.Mesh_getField(*args)
    def setField(*args): return _core.Mesh_setField(*args)
    def getPartitioning(*args): return _core.Mesh_getPartitioning(*args)
    def getSize(*args):
        """getSize(self) -> int"""
        return _core.Mesh_getSize(*args)

    def getElemset(*args):
        """
        getElemset(self, index) -> Elemset
        Parameters:
           index: int value

        """
        return _core.Mesh_getElemset(*args)

    def addElemset(*args):
        """
        addElemset(self, elemset)
        Parameters:
           elemset: Elemset instance

        """
        return _core.Mesh_addElemset(*args)

    def getOptions(*args):
        """getOptions(self) -> Options"""
        return _core.Mesh_getOptions(*args)

    def setOptions(*args):
        """
        setOptions(self, options)
        Parameters:
           options: Options instance

        """
        return _core.Mesh_setOptions(*args)

Mesh_swigregister = _core.Mesh_swigregister
Mesh_swigregister(Mesh)

class Amplitude(Object):
    """Proxy of C++ Amplitude class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CONSTANT = _core.Amplitude_CONSTANT
    TEMPORAL = _core.Amplitude_TEMPORAL
    NODAL = _core.Amplitude_NODAL
    GENERAL = _core.Amplitude_GENERAL
    kind = _swig_property(_core.Amplitude_kind_get, _core.Amplitude_kind_set)
    __swig_destroy__ = _core.delete_Amplitude
    def __init__(self, *args): 
        """
        __init__(self, ?) -> Amplitude
        __init__(self, kind=GENERAL) -> Amplitude
        Parameters:
           kind: enum PETScFEM::Amplitude::Kind value

        __init__(self) -> Amplitude
        """
        if self.__class__ == Amplitude:
            args = (None,) + args
        else:
            args = (self,) + args
        _core.Amplitude_swiginit(self,_core.new_Amplitude(*args))
    def __call__(*args):
        """
        __call__(self) -> double
        __call__(self, time) -> double
        Parameters:
           time: double value

        __call__(self, node, field) -> double
        Parameters:
           node: int value
           field: int value

        __call__(self, time, node, field) -> double
        Parameters:
           time: double value
           node: int value
           field: int value

        """
        return _core.Amplitude___call__(*args)

    def __new__(cls, *args, **kwargs):
        amp = super(Amplitude, cls).__new__(cls)
        if cls != Amplitude:
            kind = getattr(cls, 'KIND', None)
            if kind is None:
                Amplitude.__init__(amp)
            else:
                if isinstance(kind, str):
                    kind = getattr(Amplitude, kind.upper())
                Amplitude.__init__(amp, kind)
        return amp

    def __disown__(self):
        self.this.disown()
        _core.disown_Amplitude(self)
        return weakref_proxy(self)
Amplitude_swigregister = _core.Amplitude_swigregister
Amplitude_swigregister(Amplitude)

class Dofset(Object):
    """Proxy of C++ Dofset class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_Dofset
    def getComm(*args):
        """getComm(self) -> Comm"""
        return _core.Dofset_getComm(*args)

    def getNNod(*args):
        """getNNod(self) -> int"""
        return _core.Dofset_getNNod(*args)

    def getNDof(*args):
        """getNDof(self) -> int"""
        return _core.Dofset_getNDof(*args)

    def getWeights(*args):
        """getWeights(self) -> __dummy_8__"""
        return _core.Dofset_getWeights(*args)

    def setWeights(*args):
        """
        setWeights(self, weights)
        Parameters:
           weights: std::vector<float,std::allocator<float > > const & value

        """
        return _core.Dofset_setWeights(*args)

    def getSizes(*args):
        """
        getSizes(self) -> __dummy_2__
        getSizes(self, rank) -> __dummy_2__
        Parameters:
           rank: int value

        """
        return _core.Dofset_getSizes(*args)

    def getRange(*args):
        """
        getRange(self) -> __dummy_2__
        getRange(self, rank) -> __dummy_2__
        Parameters:
           rank: int value

        """
        return _core.Dofset_getRange(*args)

    def getDist(*args):
        """getDist(self) -> __dummy_7__"""
        return _core.Dofset_getDist(*args)

    def getGhostDofs(*args):
        """
        getGhostDofs(self, gdofs)
        Parameters:
           gdofs: std::vector<int,std::allocator<int > > & value

        """
        return _core.Dofset_getGhostDofs(*args)

    def getLocalDofs(*args):
        """
        getLocalDofs(self, ldofs)
        Parameters:
           ldofs: std::vector<int,std::allocator<int > > & value

        """
        return _core.Dofset_getLocalDofs(*args)

    def getFieldDofs(*args):
        """
        getFieldDofs(self, field, fdofs)
        Parameters:
           field: int value
           fdofs: std::vector<int,std::allocator<int > > & value

        """
        return _core.Dofset_getFieldDofs(*args)

Dofset_swigregister = _core.Dofset_swigregister
Dofset_swigregister(Dofset)

class AppCtx(Object):
    """Proxy of C++ AppCtx class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_AppCtx
AppCtx_swigregister = _core.AppCtx_swigregister
AppCtx_swigregister(AppCtx)

class AppNS(AppCtx):
    """Proxy of C++ AppNS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_AppNS
    def __init__(self, *args): 
        _core.AppNS_swiginit(self,_core.new_AppNS(*args))
AppNS_swigregister = _core.AppNS_swigregister
AppNS_swigregister(AppNS)

class Domain(Object):
    """Proxy of C++ Domain class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_Domain
    def __init__(self, *args): 
        """
        __init__(self, ndim, nnod, ndof) -> Domain
        Parameters:
           ndim: int value
           nnod: int value
           ndof: int value

        __init__(self, ndim, nnod, ndof, comm) -> Domain
        Parameters:
           ndim: int value
           nnod: int value
           ndof: int value
           comm: MPI_Comm value

        """
        _core.Domain_swiginit(self,_core.new_Domain(*args))
    def getComm(*args):
        """getComm(self) -> Comm"""
        return _core.Domain_getComm(*args)

    def getNDim(*args):
        """getNDim(self) -> int"""
        return _core.Domain_getNDim(*args)

    def getNNod(*args):
        """getNNod(self) -> int"""
        return _core.Domain_getNNod(*args)

    def getNDof(*args):
        """getNDof(self) -> int"""
        return _core.Domain_getNDof(*args)

    def getOptions(*args):
        """getOptions(self) -> Options"""
        return _core.Domain_getOptions(*args)

    def setOptions(*args):
        """
        setOptions(self, options)
        Parameters:
           options: Options instance

        """
        return _core.Domain_setOptions(*args)

    def getNodedata(*args):
        """getNodedata(self) -> DTableS"""
        return _core.Domain_getNodedata(*args)

    def setNodedata(*args):
        """
        setNodedata(self, nodedata)
        Parameters:
           nodedata: DTable<double> instance

        """
        return _core.Domain_setNodedata(*args)

    def getField(*args): return _core.Domain_getField(*args)
    def setField(*args): return _core.Domain_setField(*args)
    def getElemset(*args):
        """
        getElemset(self, index) -> Elemset
        Parameters:
           index: int value

        """
        return _core.Domain_getElemset(*args)

    def addElemset(*args):
        """
        addElemset(self, elemset)
        Parameters:
           elemset: Elemset instance

        """
        return _core.Domain_addElemset(*args)

    def setFixation(*args):
        """
        setFixation(self, nodes, fields, values)
        Parameters:
           nodes: int const [] value
           fields: int const [] value
           values: double const [] value

        setFixation(self, nodes, fields, amplitude)
        Parameters:
           nodes: int const [] value
           fields: int const [] value
           amplitude: Amplitude instance

        setFixation(self, nodes, fields, values, amplitude)
        Parameters:
           nodes: int const [] value
           fields: int const [] value
           values: double const [] value
           amplitude: Amplitude instance

        """
        return _core.Domain_setFixation(*args)

    def setPeriodic(*args):
        """
        setPeriodic(self, nodes1, nodes2)
        Parameters:
           nodes1: int const [] value
           nodes2: int const [] value

        setPeriodic(self, nodes1, nodes2, fields)
        Parameters:
           nodes1: int const [] value
           nodes2: int const [] value
           fields: int const [] value

        """
        return _core.Domain_setPeriodic(*args)

    def setConstraint(*args):
        """
        setConstraint(self, coeffs, nodes, fields)
        Parameters:
           coeffs: double const [] value
           nodes: int const [] value
           fields: int const [] value

        """
        return _core.Domain_setConstraint(*args)

    def getMesh(*args):
        """getMesh(self) -> Mesh"""
        return _core.Domain_getMesh(*args)

    def getDofset(*args):
        """getDofset(self) -> Dofset"""
        return _core.Domain_getDofset(*args)

    def getAppCtx(*args):
        """getAppCtx(self) -> AppCtx"""
        return _core.Domain_getAppCtx(*args)

    def setUp(*args):
        """setUp(self)"""
        return _core.Domain_setUp(*args)

    def allocateSolution(*args):
        """
        allocateSolution(self, u)
        Parameters:
           u: Vec & value

        """
        return _core.Domain_allocateSolution(*args)

    def allocateState(*args):
        """
        allocateState(self, x, vec_type="")
        Parameters:
           x: Vec & value
           vec_type: string value

        allocateState(self, x)
        Parameters:
           x: Vec & value

        """
        return _core.Domain_allocateState(*args)

    def allocateResidual(*args):
        """
        allocateResidual(self, r, vec_type="")
        Parameters:
           r: Vec & value
           vec_type: string value

        allocateResidual(self, r)
        Parameters:
           r: Vec & value

        """
        return _core.Domain_allocateResidual(*args)

    def allocateJacobian(*args):
        """
        allocateJacobian(self, J, mat_type="")
        Parameters:
           J: Mat & value
           mat_type: string value

        allocateJacobian(self, J)
        Parameters:
           J: Mat & value

        """
        return _core.Domain_allocateJacobian(*args)

    def assemble(*args):
        """
        assemble(self, t, x, r, J)
        Parameters:
           t: double value
           x: Vec value
           r: Vec value
           J: Mat value

        assemble(self, t1, x1, t0, x0, r, J, alpha=1.0)
        Parameters:
           t1: double value
           x1: Vec value
           t0: double value
           x0: Vec value
           r: Vec value
           J: Mat value
           alpha: double value

        assemble(self, t1, x1, t0, x0, r, J)
        Parameters:
           t1: double value
           x1: Vec value
           t0: double value
           x0: Vec value
           r: Vec value
           J: Mat value

        assemble(self, jobname, t, x, r, J)
        Parameters:
           jobname: string value
           t: double value
           x: Vec value
           r: Vec value
           J: Mat value

        assemble(self, jobname, t1, x1, t0, x0, r, A, alpha=1.0)
        Parameters:
           jobname: string value
           t1: double value
           x1: Vec value
           t0: double value
           x0: Vec value
           r: Vec value
           A: Mat value
           alpha: double value

        assemble(self, jobname, t1, x1, t0, x0, r, A)
        Parameters:
           jobname: string value
           t1: double value
           x1: Vec value
           t0: double value
           x0: Vec value
           r: Vec value
           A: Mat value

        """
        return _core.Domain_assemble(*args)

    def buildState(*args):
        """
        buildState(self, t, u, x) -> int
        Parameters:
           t: double value
           u: Vec value
           x: Vec value

        """
        return _core.Domain_buildState(*args)

    def buildSolution(*args):
        """
        buildSolution(self, t, x, u)
        Parameters:
           t: double value
           x: Vec value
           u: Vec value

        """
        return _core.Domain_buildSolution(*args)

    ndim = _swig_property(_core.Domain_ndim_get)
    nnod = _swig_property(_core.Domain_nnod_get)
    ndof = _swig_property(_core.Domain_ndof_get)
Domain_swigregister = _core.Domain_swigregister
Domain_swigregister(Domain)



