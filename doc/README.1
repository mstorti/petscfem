.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "README 1"
.TH README 1 "2017-01-02" "perl v5.10.1" ""
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PETSc\-FEM \- a general  purpose,  parallel, multi\-physics FEM program
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This is PETSc-FEM, a general purpose, parallel, multi-physics \s-1FEM\s0
(Finite Element Method) program for \s-1CFD\s0 (Computational Fluid Dynamics)
applications based on PETSc . PETSc-FEM comprises both a library that
allows the user to develop \s-1FEM\s0 (or FEM-like, i.e.  non-structured mesh
oriented) programs, and a suite of application programs.  It is
written in the \*(C+ language with an \s-1OOP\s0 (Object Oriented Programming)
philosophy, keeping in mind the scope of efficiency. PETSc-FEM may run
in parallel using the \s-1MPI\s0 standard on a variety of architectures, but
currently it has been tested in Beowulf clusters only.
.PP
PETSc-FEM is \s-1GPL\s0, for further details read the file \s-1COPYING\s0 in the
root directory of the distribution.
.SH "LICENSE"
.IX Header "LICENSE"
This file belongs to the PETSc \- \s-1FEM\s0 package a library and application
suite oriented to the Finite Element Method based on PETSc.  Copyright
(C) 1999\-2008, Mario Alberto Storti, Norberto Marcelo Nigro, Rodrigo
Rafael Paz, Lisandro Dalcin and Ezequiel Lopez, Centro Internacional de Metodos
Numericos en Ingenieria (CIMEC-Argentina), Universidad Nacional del
Litoral (UNL-Argentina), Consejo Nacional de Investigaciones
Cientificas y Tecnicas (CONICET-Argentina).
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0
General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, \s-1MA\s0 02111\-1307,
\&\s-1USA\s0.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.SS "Platforms"
.IX Subsection "Platforms"
Currently, PETSc-FEM is known to run only on Beowulf class clusters
based on Intel processors, running the GNU/Linux \s-1OS\s0.  Off course, you
can also install PETSc-FEM in a single GNU/Linux box, for use in
sequential (i.e. non-parallel) mode or either for simulating parallel
runs, by launching several processes in the same processor. (This is a
feature of \s-1MPI\s0). PETSc-FEM compiles cleanly with the \s-1GNU\s0 compiler \s-1GCC\s0
4.1.1 that comes with the Fedora Core 5 GNU/Linux distribution. 
<http://fedora.redhat.com/>
.PP
I guess it should be relatively easy to install in other processor
architectures (\s-1SPARC\s0 or Alpha) running GNU/Linux and also on other
Unix flavor's.
.SS "Required Software"
.IX Subsection "Required Software"
Before installing PETSc-FEM, please verify you have the following
packages correctly installed in your system.
.IP "\s-1MPI\s0" 4
.IX Item "MPI"
\&\fIMessage Passing Interface\fR. We are currently using \s-1MPICH2\s0 1.0.3
(<http://www.mcs.anl.gov/mpich>) but I think it should be possible to
use other versions of \s-1MPI\s0 like \s-1LAM\s0 or OpenMPI.
.IP "\s-1PETSC\s0" 4
.IX Item "PETSC"
\&\fIPortable, Extensible Toolkit for Scientific Computation\fR
and can be found at <http://www.mcs.anl.gov/petsc/>. Current version
of PETSc-FEM compiles with PETSc 2.1.6.
.IP "\s-1LAPACK\s0" 4
.IX Item "LAPACK"
This is, in fact, a prerequisite to install PETSc and can be found at 
<http://www.netlib.org/lapack/>.
.IP "Libretto" 4
.IX Item "Libretto"
This is a C library of generic containers and can be found at
<http://pobox.com/~aaronc/tech/libretto/>. I have learned recently
that development of Libretto has been stopped since it has been
superseded by \fB\s-1GLIB\s0\fR, so that I think that in a future I will replace
the Libretto code by \fB\s-1GLIB\s0\fR. Also, the \s-1STL\s0 library (that comes with
gcc) can replace all or some of the features provided by \fBLibretto\fR
but I found that the \s-1STL\s0 implementation (at least that one that comes
with gcc) is rather inefficient.
.IP "\s-1GLIB\s0" 4
.IX Item "GLIB"
\&\s-1GLIB\s0 is a library which includes support routines for C such as lists,
trees, hashes, memory allocation, and many other things. The official
web site is <http://www.gtk.org/>. [RedHat \s-1RPM\s0 packages: \f(CW\*(C`GLIB\*(C'\fR,
\&\f(CW\*(C`glib\-devel\*(C'\fR]
.IP "Newmat" 4
.IX Item "Newmat"
This is a matrix library to be used mainly at the element routine
level, i.e. for small matrices and can be found at
<http://webnz.com/robert/>. It is not mandatory to use Newmat for all
element calculations. In fact there is included a matrix class called
FastMat2 that is more performing, but Newmat is still used in some
internal parts and has much more functions, so that you have to
install it. Also, you may prefer \fINewmat\fR over \fIFastMat2\fR for
element calculations since it supports overloading of algebraic
operations. See the documentation on \fIFastMat2\fR in the \fIPETSc-FEM\fR
documentation for reasons why to use FastMat2 instead of Newmat.
.IP "\s-1METIS\s0" 4
.IX Item "METIS"
\&\s-1METIS\s0 is a software package for partitioning unstructured graphs,
partitioning meshes, and computing fill-reducing orderings of sparse
matrices. It can be found at <http://www.cs.umn.edu/~metis>.
.IP "Meschach" 4
.IX Item "Meschach"
The Meschach Library is a numerical library of C routines for
performing calculations on matrices and vectors. It is used only for
some functions that can not be done with Newmat. Currently, it is used
in the advective module for performing eigenvalue decomposition of
non-symmetric matrices. I think that in a future this functionality
could be replaced by calls to \s-1LAPACK\s0.
.IP "Perl" 4
.IX Item "Perl"
If you want to use \fBePerl\fR then you need to have \fBPerl\fR
installed. [RedHat \s-1RPM\s0 package: \f(CW\*(C`perl\*(C'\fR].
.IP "SuperLU (optional)" 4
.IX Item "SuperLU (optional)"
A collection of \s-1ANSI\s0 C routines to solve sparse linear systems of
equations. Can be found at <http://www.nersc.gov/~xiaoye/SuperLU/>. 
This package is optional, install it if you think that SuperLU is faster
than PETSc for direct factorization of sparse matrices.
.IP "\s-1ANN\s0 (optional)" 4
.IX Item "ANN (optional)"
This is the \fIApproximate Nearest Neighbor Library\fR and can be found
at <http://www.cs.umd.edu/~mount/ANN>. Currently it is only used in
the Navier-Stokes module for calculating the damping functions in the
Smagorinsky model. However, in a future it may be used more widely for
some mesh manipulations. Currently it is optional.
.IP "pthreads library (optional)" 4
.IX Item "pthreads library (optional)"
This is a \s-1POSIX\s0 compliant library for threads, currently used for
asynchronous communication with the \s-1IBM\s0 Data Explorer visualization
tool, but it might be used for other things in a near future. 
It comes with gcc, so that if you use gcc, you probably have it
already installed.
.IP "Simple Sockets Library (\s-1SSL\s0) (optional)" 4
.IX Item "Simple Sockets Library (SSL) (optional)"
The Simple Sockets Library (\s-1SSL\s0) allows C programmers to use
interprocess communications via Berkeley sockets simply and quickly.
Most of the \s-1SSL\s0's functions resemble C's file i/o functions, so C
programmers will find the \s-1SSL\s0 easy to learn. Currently used for
communication with the \s-1IBM\s0 Data Explorer visualization tool, but 
but it might be used for other things in a near future. 
[Current version: 2.11a Tue Mar  6 09:46:16 \s-1EST\s0 2001]
[Note: If you do a web search you can find it as a file \f(CW\*(C`COSMIC.tar.gz\*(C'\fR
or \f(CW\*(C`ssl.tar.gz\*(C'\fR].
.SS "Unpacking"
.IX Subsection "Unpacking"
Once you got the \f(CW\*(C`petscfem\-xxx.tar.gz\*(C'\fR package (\f(CW\*(C`xxx\*(C'\fR stands for the
version), gunzip and untar it like this:
.PP
.Vb 2
\&  $ gunzip petscfem\-xxx.tar.gz
\&  $ tar xvf petscfem\-xxx.tar
.Ve
.PP
This will create a \fIpetscfem-xxx\fR directory with
all the source files included.
.SS "Makefile variables"
.IX Subsection "Makefile variables"
.ie n .IP """$(PETSCFEM_DIR)""" 4
.el .IP "\f(CW$(PETSCFEM_DIR)\fR" 4
.IX Item "$(PETSCFEM_DIR)"
The root of the PETSc-FEM package
.ie n .IP """$(PETSC_ARCH)"", ""$(PETSC_DIR)""" 4
.el .IP "\f(CW$(PETSC_ARCH)\fR, \f(CW$(PETSC_DIR)\fR" 4
.IX Item "$(PETSC_ARCH), $(PETSC_DIR)"
These are variables relative to PETSc. See documentation.
.SS "Configuring"
.IX Subsection "Configuring"
Once you have all the software mentioned in \*(L"Required Software\*(R"
installed, you have to define the variables in the \fB\s-1CONFIGURATION\s0
\&\s-1VARIABLES\s0\fR section in file \fI$(\s-1PETSCFEM_DIR\s0)/Makefile.base\fR.
.IP "\(bu" 4
First you have to set the \f(CW\*(C`PETSC_BOPT\*(C'\fR variable which is the default
value for the \f(CW\*(C`PETSc\*(C'\fR \f(CW\*(C`BOPT\*(C'\fR variable, which sets the
optimization level to be used in compilation. You can set it to
.RS 4
.ie n .IP """PETSC_BOPT = g_c++""" 4
.el .IP "\f(CWPETSC_BOPT = g_c++\fR" 4
.IX Item "PETSC_BOPT = g_c++"
Compiles for debugging.
.ie n .IP """PETSC_BOPT = O_c++""" 4
.el .IP "\f(CWPETSC_BOPT = O_c++\fR" 4
.IX Item "PETSC_BOPT = O_c++"
Compiles with optimization enabled.
.RE
.RS 4
.Sp
The optimization level is inherited by the \f(CW\*(C`PETSc\*(C'\fR libraries so that
if you compile with \f(CW\*(C`PETSC_BOPT=O_c++\*(C'\fR then not only \f(CW\*(C`PETSc\-FEM\*(C'\fR
will be compiled with optimization, but also the \f(CW\*(C`PETSc\*(C'\fR optimized
libraries will be used. The specific optimization options are set in 
\&\f(CW\*(C`$(PETSC_DIR)/bmake/$(PETSC_ARCH)/variables\*(C'\fR (\f(CW\*(C`OCXX_COPTFLAGS\*(C'\fR variable). 
According to our experience
maximum optimization is achieved with <BOPT=\-O2 \-funroll\-loops>.
.Sp
The default value can be superseded by, for instance, issuing
.Sp
.Vb 1
\&  $ make BOPT=O_c++ ns
.Ve
.Sp
This compiles the Navier-Stokes module with optimization enabled
independently of the \f(CW\*(C`PETSC_BOPT\*(C'\fR default value.
.RE
.IP "\(bu" 4
The \f(CW\*(C`PROF_FLAGS\*(C'\fR variables allows you to turn on profiling. By
default, profiling is deactivated.
.IP "\(bu" 4
Other configuration variables are defined in a file \f(CW\*(C`Makefile.defs\*(C'\fR,
but normally they are set only when you first install PETSc-FEM, so
the best is to put \f(CW\*(C`Makefile.defs\*(C'\fR in the directory immediately above
PETSc-FEM directory (i.e. \f(CW\*(C`$(PETSCFEM_DIR)/..\*(C'\fR).  So that, if you
install another version of PETSc-FEM, the settings will be seen
immediately by the new version. A version of \f(CW\*(C`Makefile.defs\*(C'\fR is
included in the PETSc-FEM directory.  Copy it to the directory _above_
the PETSC-FEM directory and configure the variables inside. If you
install another version of PETSc-FEM then probably you have not to
configure again these variables, unless a new package has been added
or you have moved it.
.SS "Compiling"
.IX Subsection "Compiling"
\&\f(CW\*(C`cd\*(C'\fR to directory \f(CW\*(C`$(PETSCFEM_DIR)\*(C'\fR and do
.PP
.Vb 3
\&  $ make depend
\&  $ make libpetscfem        # to build the library
\&  $ make all                # to build the library and all the modules
.Ve
.PP
also
.PP
.Vb 1
\&  $ make what
.Ve
.PP
can help you on other useful targets.
.PP
If nothing goes wrong you will end with a \fIsrc/libpetscfem.a\fR library
and application binaries (ending in \f(CW\*(C`.bin\*(C'\fR) in their respective
directories, e.g. \fIapplications/ns/ns.bin\fR is the Navier-Stokes binary.
.SH "DOCUMENTATION"
.IX Header "DOCUMENTATION"
Documentation for \fIPETSc-FEM\fR is included in the
\&\f(CW\*(C`$(PETSCFEM_DIR)/doc\*(C'\fR directory. There is basically a reference
manual written in \fILaTeX\fR (\fIdoc/petscfem.tex\fR), and embedded
documentation for the routines to be used with \f(CW\*(C`Doc++\*(C'\fR. In the
standard distrib you should find both of them converted to \s-1HTML\s0
(\f(CW\*(C`LaTeX\*(C'\fR is converted with \f(CW\*(C`latex2html\*(C'\fR) and accessible from
\&\fIdoc/index.html\fR. Other formats (perhaps PostScript and \s-1PDF\s0) may be also
found in the \f(CW\*(C`doc\*(C'\fR directory.
.SH "TESTS AND EXAMPLES"
.IX Header "TESTS AND EXAMPLES"
Many tests and examples are in the \f(CW\*(C`$(PETSCFEM_DIR)/test\*(C'\fR directory.
.SH "WRITING A NEW APPLICATION MODULE"
.IX Header "WRITING A NEW APPLICATION MODULE"
The best way to start coding an application program is to duplicate a
directory (for instance \f(CW\*(C`applications/advdif\*(C'\fR) or (for instance
\&\f(CW\*(C`applications/ns\*(C'\fR) to a directory from
your own (i.e. outside the \f(CW\*(C`$(PETSCFEM_DIR)\*(C'\fR tree, say
\&\f(CW\*(C`/your/appl/path\*(C'\fR. Configure the \f(CW\*(C`$(PETSCFEM_DIR)\*(C'\fR variable in the
local makefile (i.e. \f(CW\*(C`/your/appl/path/Makefile\*(C'\fR).You should have to
configure other variables as well, perhaps \f(CW\*(C`$(MYOBJS)\*(C'\fR (this is a
list of the object (\f(CW\*(C`.o\*(C'\fR) files in this local directory) and
\&\f(CW\*(C`$(PROG)\*(C'\fR (the name of the program to be built, without the suffix
\&\f(CW\*(C`.bin\*(C'\fR).
.SH "AUTHORS"
.IX Header "AUTHORS"
.ie n .IP "Mario A. Storti* ""<mario.storti@gmail.com>""" 4
.el .IP "Mario A. Storti* \f(CW<mario.storti@gmail.com>\fR" 4
.IX Item "Mario A. Storti* <mario.storti@gmail.com>"
PETSc-FEM kernel, \s-1NS\s0 and AdvDif modules.
.ie n .IP "Norberto M. Nigro* ""<nnigro@intec.unl.edu.ar""""" 4
.el .IP "Norberto M. Nigro* \f(CW<nnigro@intec.unl.edu.ar""\fR" 4
.IX Item "Norberto M. Nigro* <nnigro@intec.unl.edu.ar"""
\&\s-1NS\s0 and AdvDif modules, multi-phase flow.
.ie n .IP "Rodrigo R. Paz* ""<rodrigop@intec.unl.edu.ar>""" 4
.el .IP "Rodrigo R. Paz* \f(CW<rodrigop@intec.unl.edu.ar>\fR" 4
.IX Item "Rodrigo R. Paz* <rodrigop@intec.unl.edu.ar>"
AdvDif module, hydrology module, compressible flow, fluid-structure
interaction, preconditioners.
.ie n .IP "Lisandro Dalcin* ""<dalcinl@intec.unl.edu.ar>""" 4
.el .IP "Lisandro Dalcin* \f(CW<dalcinl@intec.unl.edu.ar>\fR" 4
.IX Item "Lisandro Dalcin* <dalcinl@intec.unl.edu.ar>"
PETSc-FEM kernel, Python extension language project, linear algebra,
preconditioners, multigrid.
.ie n .IP "Ezequiel Lopez* ""<ezequiellopez@hotmail.com>""" 4
.el .IP "Ezequiel Lopez* \f(CW<ezequiellopez@hotmail.com>\fR" 4
.IX Item "Ezequiel Lopez* <ezequiellopez@hotmail.com>"
Mesh relocation algorithms.
.ie n .IP "Laura Battaglia* ""<lbattaglia@santafe\-conicet.gov.ar>""" 4
.el .IP "Laura Battaglia* \f(CW<lbattaglia@santafe\-conicet.gov.ar>\fR" 4
.IX Item "Laura Battaglia* <lbattaglia@santafe-conicet.gov.ar>"
Free surface algorithms.
.ie n .IP "Gustavo Rios Rodriguez * ""<gusadrr@yahoo.com.ar>""" 4
.el .IP "Gustavo Rios Rodriguez * \f(CW<gusadrr@yahoo.com.ar>\fR" 4
.IX Item "Gustavo Rios Rodriguez * <gusadrr@yahoo.com.ar>"
Adaptive refinement.
.ie n .IP "Pablo Kler * ""<pabloakler@gmail.com>""" 4
.el .IP "Pablo Kler * \f(CW<pabloakler@gmail.com>\fR" 4
.IX Item "Pablo Kler * <pabloakler@gmail.com>"
Electrokinetic module.
.PP
* \s-1CIMEC\s0, Internacional Center for Computational Methods in Engineering,
Santa Fe, Argentina. 
<http://www.cimec.org.ar/petscfem> 
Ordinary mail: Mario Storti, CIMEC-INTEC, Guemes 3450, 3000 Santa Fe, Argentina.
