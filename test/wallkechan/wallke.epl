<:
require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";       # Initializes ePerl 
#
$L = 1;                         # Semi distance between plates
$N = 16;                        # Number of elements in transversal 'x' direction
$hratio = 20;                   # refinement near the wall
$hratioy = 20;                  # refinement to the exit
$Ny = 40;                       # Number of elements in y dir
$Ny_eq = 20;                    # last elements that are equal in size
                                # in the y direction
$Ly = 10;                       # longitudinal length 
$wall_ke=1;                     # set non-slip condition or
                                # mixed type (wall_ke) boundary condition
$peri = 0;                      # Set periodic in the `y' direction or not
$turb_prod_coef=1;              # activate/deactivate turbulence production terms
$uwall_match_len = 0.1;         # u at the wall is matched to 0 (from the inlet) at
                                # this distance 
$iterative = 0;                 # use iterative or direct solver 'lu'
$restart = 0;
$piston = 1;
if ($case eq 'poi_lam') {
#    $wall_ke=1;
    $Re_l = 5;                  # laminar Re
    $Umax = 1;                  # Max vel in the channel
    $Uav = 1.5*$Umax;           # Aver vel 
    $nu = $Uav*2*$L/$Re_l;      # kinematic visc.
#    $g = $nu*2*$Umax/$L**2;     # body force
    $g = 0;
    $y_wall_plus = 1;           # not used here
    $case = 'poiseuille';       # redirect case
    $turbulence_coef=0;         # no turbulence
} elsif ($case eq 'poiseuille') {
    $Re = 5e4;                  # laminar Re
    $Uav = 1;
    $nu = $Uav*2*$L/$Re;        # kinematic visc.
    $g = 0;                     # body force
    $y_wall_plus = 50 ;         # non-dim. distance to the wall
    $y_wall = .01;
    $turbulence_coef=1;         # mask turbulence
    $turb_prod_coef=1;          # mask turbulence production terms
    $iterative =0;              # use iterative method or not
    $restart = 0;
    $piston = 1;
#    $restart = 1 if $iterative;
} elsif ($case eq 'couette') {
    $Re_l = 34000;              # laminar Re
    $Uwall = 1;                 # half relative velocity of the plates
    $nu = $Uwall * 
        (2*$L) / $Re_l;         # viscosity
    $g=0;                       # body force
    $y_wall_plus = 10;          # distance to the wall
    $turbulence_coef=1;               # activates turbulence
}
$ocase = $case;    
octave_export_vars("data.m.tmp",qw(nu g N Ny hratio hratioy 
    L Ly peri Ny_eq Uav uwall_match_len piston));
:>//                            # ends ePerl block

#default definitions
#===========================================================
global_options
ndim 2

#save_file <:= ($iterative ? "pp.tmp" : "save.state") :>
save_file "save.state"
nsave 5

#rtol 1e-2
rtol 0
atol 0
maxits <:= ( $iterative ? 200 : 1 ) :>
#print_internal_loop_conv <:= $iterative:>

save_file_pattern "outvector%d.out"
nsaverot 1

#if $restart
initial_state "save.state"
#elsif $case eq 'poiseuille'
initial_state "wallke.ini.tmp"
#elsif $case eq 'couette'
initial_state "wallke.inic.tmp"
#else
<:= die "not known case $case\n":>
#endif
print_some_file "wallke.some"
save_file_some "wallke.some.tmp"
nsome 1

alpha 1.
nstep 10
nnwt 4
tol_newton 0
preco_type <:= ($iterative ? "\"jacobi\"" : "\"lu\""); :>
Dt 1
#steady
newton_relaxation_factor 0.1
kap_ctff_val 1e-5
eps_ctff_val 1e-5
#pspg_advection_factor 0.
#pspg_factor 2.

#verify_jacobian_with_numerical_one
#print_linear_system_and_stop
#solve_system 0
#print_dofmap_id

lumped_wallke 1
y_wall_plus <:=$y_wall_plus:>
y_wall <:=$y_wall:>
turbulence_coef <:=$turbulence_coef:>
turb_prod_coef <:=$turb_prod_coef:>
viscosity <:=$nu:>
G_body 0. <:=$g:>

# todavia no tenemos el weak form para k-e (???)
weak_form 0 

__END_HASH__

# ndim nu ndof
nodes   2  2  5
__INCLUDE__ wallke.nod.tmp
__END_NODES__

#===========================================================
elemset nsi_tet_keps 4
geometry cartesian2d
npg 4
__END_HASH__
__INCLUDE__ wallke.con.tmp
__END_ELEMSET__

#if $wall_ke
elemset wallke 2
props u_wall[2]
geometry cartesian1d
npg 2
__END_HASH__
__INCLUDE__ wallke.wallke.tmp
__END_ELEMSET__
#endif

elemset wall_law_res 2
props u_wall[2]
lagrange_scale_factor 1e-3
lagrange_diagonal_factor <:= ($iterative ? 1e-3 : 1e-6 ); :>
lagrange_residual_factor 0 # if =1 be non consistent, but truly Newton
                           # if =0 be consistent, but not truly Newton
__END_HASH__
__INCLUDE__ wallke.nonlr.tmp
__END_ELEMSET__

end_elemsets

#===========================================================
#if 1
fixa

# pressure fixed at some node
#<:print (($Ny+1)*($N-1)+2):> 3  0.

# u velocity imposed to 0 in all the center line (right)
__INCLUDE__ wallke.u_0_right_wall.tmp

# u velocity imposed to 0 in all the left wall
__INCLUDE__ wallke.u0.tmp

# v velocity imposed to 0 in all the left wall
# in turbulent case this should be done via wall functions
#__INCLUDE__ wallke.v_0_left_wall.tmp

# fix other fields than the two lagrange multipliers
__INCLUDE__ wallke.fixa_lag.tmp

# fix lateral (u) velocity to 0 at the outlet
#__INCLUDE__ wallke.u_out_0.tmp

# fix pressure to 0 at the outlet
__INCLUDE__ wallke.p_out_0.tmp

# quantities at inlet 
#if !$peri
__INCLUDE__ wallke.fixa_in.tmp
#endif

__END_FIXA__
#endif

#if 0
constraint
# fix u,v,k,e periodic at output
__INCLUDE__ wallke.fixa_out_peri.tmp
__END_CONSTRAINT__
#endif

#if 0
constraint
# ultimo nodo en la pared periodico en k y epsilon con respecto al anterior
-1. <:=$Ny+1:> 4 +1. <:=$Ny:> 4 
-1. <:=$Ny+1:> 5 +1. <:=$Ny:> 5 
__END_CONSTRAINT__
#endif

#if 0
constraint
# fix p to 0 at the outlet (weighted version) 
__INCLUDE__ wallke.wp_out_0.tmp
__END_CONSTRAINT__
#endif

#if $peri
constraint
__INCLUDE__ wallke.peri.tmp
__END_CONSTRAINT__
#endif

# Local Variables: $
# mode: shell-script $
# eval: (setq indent-tabs-mode nil) $
# End: $
