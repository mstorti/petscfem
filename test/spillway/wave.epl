##__INSERT_LICENSE__
## $Id: wave.epl,v 1.5 2003/03/31 17:07:10 mstorti Exp $ 
<:                              # starts ePerl block
#__TRANSCRIPT__
require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";       # Initializes ePerl 
require "$ENV{'PETSCFEM_DIR'}/tools/dx.pl";       # Initializes ePerl 
$initia = ($ENV{'initia'} ? 1 : 0);
require 'dataw.pl';
$fs_relax = 0 if $initia;
#__END_TRANSCRIPT__
@vars = qw(Lx h Ny Nx fs_relax Dt gravity p_const_bc patm slope
    yratio initia eta0);
transcript("", @vars);	# print variables on output and transcript this block
octave_export_vars(">data.m.tmp",@vars);
system "initia=1 octave -qH mkwave.m";
:>//                            # ends ePerl block

# <:pr('initia'):>
# <:pr('slope'):>
# <:pr('viscosity'):>
# Laminar aver. velocity: <:pr('u_av'):>
# Laminar max. velocity: <:pr('u_max'):>
#===========================================================
global_options
ndim 2

save_file "wave.state.tmp"
nsave 1

save_file_pattern "wave.state_%d.tmp"
nsaverot 10
nrec 1
nfile 100000000

#if $initia
initial_state "wave.steady_state"
#endif
nstep 10000
steady <:=$initia:>
solver "iisd"
iisd_subpart_auto 2000
preco_type "jacobi"
# print_internal_loop_conv 1
Krylov_dim 200
nnwt 3
alpha 1.0
weak_form 0
<:pr('Dt'):>
rtol 1e-4
atol 1e-10
iisdmat_print_statistics
print_partitioning_statistics
# print_linear_system_and_stop
# verify_jacobian_with_numerical_one 1
# solve_system 0
# report_consumed_time
launch_mesh_move 1

#if !$initia
hook_list ns_dx_hook my_dx_hook \
          dl_generic_hook my_ale_hook
my_ale_hook.filename ./alehook.efn
my_ale_hook.prefix   ale_hook2
#endif

<:=pr('viscosity'):>
G_body <:=$slope*$gravity:> <:=-$gravity:>

# For DX
dx_split_state "1 2 0 1 u 1 1 2 p"
dx_auto_combine
dx_state_all_fields 0
<:pr('dx_steps'):>
# dx_read_state_from_file 1
__END_HASH__

#===========================================================
# ndim nu ndof
nodedata   2  2  3
data wave.nod.tmp
__END_HASH__

#===========================================================
elemset nsi_tet_les_fm2 4
name viscous_fluid_elemset
geometry cartesian2d
npg 4
data wave.con.tmp
rho 1.
dx 
__END_HASH__

end_elemsets

#===========================================================
fixa
__INCLUDE__ "wave.fixa_bot.tmp"
#if $p_const_bc
__INCLUDE__ "wave.patm.tmp"
#else
## Pressure at some node
1 3 0.
## Null normal velocity
__INCLUDE__ "wave.fixa_top.tmp"
#endif
__END_FIXA__

#===========================================================
constraint
__INCLUDE__ "wave.peri.tmp"
__END_CONSTRAINT__

# Local Variables: $
# mode: shell-script $
# eval: (setq indent-tabs-mode nil) $
# End: $
