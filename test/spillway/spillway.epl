##__INSERT_LICENSE__
## $Id: spillway.epl,v 1.3 2003/03/21 10:04:49 mstorti Exp $ 
<:                              # starts ePerl block
#__TRANSCRIPT__
require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";       # Initializes ePerl 
require "$ENV{'PETSCFEM_DIR'}/tools/dx.pl";       # Initializes ePerl 
$case_name = $ENV{'case_name'};
$case_name = 'default' unless defined $case_name;
if (!$re_start && -f 'spillway.axis_nodes.rslt.tmp') {
    unlink 'spillway.axis_nodes.rslt.tmp';
}
$layers = 2;
$C = 0.053547;			# Constants of spillway expr.
$E = 1.85;
$H1 = 66.50;			# vertical position of spillway top position
$L1 = 18;			# Distance from top of spillway to start
				# of flat bottom
$L2 = 50;			# Flat bottom length
$h1 = 4;                        # Water height at top of spillway
$y2 = 65.79;			# restitution height

$ref = 2;                       # refinement parameter
$Ny = 10*$ref;                  # Number of elements along vert. direction
$Nx = 50*$ref;                  # Number of elements along horiz. direction

$gravity = 9.8;                 # gravity acceleration (magnitude)
$uin = sqrt($gravity*$h1);      # velocity at inlet
$fs_relax = 0.01;               # relaxation factor for the 
                                # free surface evolution eq. 
$Dt = 0.1;
$patm = -$gravity*$y2;          # atmosferix pressure (taken at the
                                # restitution height). Should take into
                                # account the velocity of the fluid at the outlet. 
$p_const_bc = 1;                # Impose = patm on the free surface
#__END_TRANSCRIPT__
@vars = qw(C E H1 L1 L2 h1 y2 Ny Nx uin fs_relax Dt gravity p_const_bc patm);
transcript("", @vars);	# print variables on output and transcript this block
octave_export_vars(">data.m.tmp",@vars);
system "initia=1 octave -qH spillway.m";
$nnod = count_lines("./spillway.nod.tmp");
:>//                            # ends ePerl block

# <:pr('case_name'):>
#===========================================================
global_options
ndim 2

save_file "spillway.state.tmp"
nsave 1

save_file_pattern "spillway.state_%d.tmp"
nsaverot 10
nrec 1
nfile 100000000

initial_state "RUN1/spillway.state_10.tmp"
# initial_state "spillway.state.tmp"
# initial_state "spillway.ini.tmp"
nstep 10000
# steady
solver "iisd"
iisd_subpart_auto 2000
preco_type "jacobi"
# print_internal_loop_conv 1
Krylov_dim 200
nnwt 3
alpha 1.0
weak_form 0
<:pr('Dt'):>
rtol 1e-4
atol 1e-10
iisdmat_print_statistics
print_partitioning_statistics
# print_linear_system_and_stop
# verify_jacobian_with_numerical_one 1
# solve_system 0

hook_list ns_dx_hook my_dx_hook \
          dl_generic_hook my_ale_hook

my_ale_hook.filename ./alehook.efn
my_ale_hook.prefix   ale_hook

viscosity 1e-2
G_body 0. <:=-$gravity:>

# For DX
dx_split_state "1 2 0 1 u 1 1 2 p"
dx_auto_combine
dx_state_all_fields 0
dx_steps 0
# dx_read_state_from_file 1
__END_HASH__

#===========================================================
# ndim nu ndof
nodedata   2  2  3
data spillway.nod.tmp
__END_HASH__

#===========================================================
elemset nsi_tet_les_fm2 4
name viscous_fluid_elemset
geometry cartesian2d
npg 4
data spillway.con.tmp
rho 1.
dx 
__END_HASH__

end_elemsets

#===========================================================
fixa
__INCLUDE__ "spillway.fixa_in.tmp"
__INCLUDE__ "spillway.fixa_out.tmp"
__INCLUDE__ "spillway.fixa_bot.tmp"
#if $p_const_bc
__INCLUDE__ "spillway.patm.tmp"
#endif
__END_FIXA__

#===========================================================
#if !$p_const_bc
constraint
__INCLUDE__ "spillway.slip.tmp"
__END_CONSTRAINT__
#endif


# Local Variables: $
# mode: shell-script $
# eval: (setq indent-tabs-mode nil) $
# End: $
