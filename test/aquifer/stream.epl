# -*- mode: shell-script -*-
<:                              # starts ePerl block
#__TRANSCRIPT__
require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";# Initializes ePerl 
get_var_env('casen',undef);
$save_file = ($casen ? "stream.$casen.tmp" : "stream.state.tmp");
$casename = $casen;
@subcases = split "_",$casen;
die "incorrect case name: casen=$casen\n" unless $#subcases==1;
$fric = $subcases[0];
$shape = $subcases[1];
$Nx = 50;
$Lx = 1;			# Side of the cavity
$Dt = 0.1;			# time step
$nstep = 50;
$t = $nstep*$Dt;
$slope = 0.01;			# Slope of the bottom
$circular_path = 1;		# Use a circular stream instead of
				# a rectangular one (should give almost
				# the same answer)
#
#__END_TRANSCRIPT__
@vars = qw(t Nx Lx Dt nstep slope circular_path casen casename
    fric shape);
transcript("", @vars);	# print variables on output
octave_export_vars(">data.m.tmp",@vars);
:>//                            # ends ePerl block

global_options

ndim 2
nsave 5
<:pr('nstep'):> 
initial_state "stream.ini.tmp"
<:pr('save_file'):> 

save_file_pattern "stream.rot%d.tmp"
nsaverot 1

solver "petsc"
preco_type "lu"

# file containing the weight (speed) of processors
proc_weights weights.dat

#    Iterative parameters
tol_tet 1e-5
tol_newton 1e-10
atol 0
rtol 1e-6
dtol 1e3
nnwt 5

Krylov_dim <:=$maxits:>
print_internal_loop_conv 1
# print_linear_system_and_stop 1
# verify_jacobian_with_numerical_one 1

# print_nodal_partitioning 1
Dt <:=$Dt:>
steady <:=$steady:>
alpha 1.
weak_form 0
tau_fac 0.1

__END_HASH__

# ndim nu ndof
nodes  2  3  1
__INCLUDE__ stream.nod.tmp
_END_NODES__

elemset stream 2
name malla
geometry cartesian1d
npg 2
#if $fric eq "chezy"
friction_law "Chezy"
Ch 1.
#elsif $fric eq "manning"
friction_law "Manning"
roughness 1.345
#else
<:= die "not known friction law \"$fric\", \$casen = \"$casen\"\n"; :>
#endif

#if $shape eq "rect"
shape "rectangular"
width 1.
#elsif $shape eq ""
shape "circular"
radius 5
#else
<:= die "not known channel shape \"$shape\", \$casen = \"$casen\"\n"; :>
#endif

slope 0.01

__END_HASH__
__INCLUDE__ stream.con.tmp
__END_ELEMSET__

end_elemsets

fixa_amplitude dl_generic
t0 0.
f0 1.
t1 1.8
f1 0.5
__END_HASH__
1 1 1.
__END_FIXA__
