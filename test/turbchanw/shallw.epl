# -*- mode: shell-script -*-
#
#================================================================
global_options

# Initializes ePerl 
#<:require '../eperlini.pl';:>	

# SUPG conf
weak_form 0
addvisc 0.

# time stepping
local_time_step 0
auto_time_step 0
consistent_supg_matrix 1
Dt 2
nstep 20
alpha 1

# para correr con mass lumping
beta_supg 0
# lumped_mass 1

# standard saving
save_file "state.out.tmp"
nsave 10

# initialization
initial_state "tc.ini.tmp"

# "rotary saving" 
save_file_pattern "outvector%d.out"
nsaverot 1
nrec  100
nfile 2

# saving some
nsome 1
print_some_file "nodes.some"
save_file_some "some.tmp"

# Newton loop
nnwt 5
# omega_newton 0.3
tol_newton 1e-10
solver "iisd"
preco_type "jacobi"
iisd_subpart_auto 2000

# convergence parameters. Internal GMRES loop. 
rtol 0
atol 0
dtol 1e10
maxits 100
print_internal_loop_conv 0

__END_HASH__

#===========================================================
#      ndim nu       ndof
nodes   2  3  5
__INCLUDE__ turbchanw.nod.tmp
__END_NODES__

#===========================================================
elemset advdif_swfm2t 4
log_vars_list <:=($heat? "1 " :"4 5  # use log vars for k and epsilon"):> 

#Datos del elemento
geometry cartesian2d
ndim 2
npg 4

#lumped_mass 0
chunk_size 500
__END_HASH__
__INCLUDE__ turbchanw.con.tmp
__END_ELEMSET__

#================================================================
#if 0
elemset bcconv_adv_swfm2t 2
npg 2
ndim 2
geometry cartesian1d

__END_HASH__

2 1
<:=2*$N+2:>  <:=2*$N+1:> 
__END_ELEMSET__
#endif

end_elemsets

#================================================================
fixa
#if $heat
1 1 <:=($vars{'use_log_vars'} ? log($heat_wall) : $heat_wall):>
2 1 <:=($vars{'use_log_vars'} ? log($heat_wall) : $heat_wall):>
#else
1 1 <:=.9*$q*$h:>		# u = some value
1 2 0				# v = 0              at the wall

<:=2*$N+1:> 2 0.		# v=0 at the outer region
#endif

__END_FIXA__

#================================================================
#if !$heat
constraint
__INCLUDE__ turbchanw.peri.tmp

__END_CONSTRAINT__
#endif
