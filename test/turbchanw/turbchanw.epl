# -*- mode: shell-script -*-
#
#================================================================
global_options

<:require '../eperlini.pl';	# Initializes ePerl 
$heat=0 unless $heat;		# Chooses between a heat eq. test
				# and a shallow water test
%vars=();
if (!$heat) {
    import_vals('./shallowt.m',\%vars);
    $slope = readm('slope','./tcini.m');
    $h     = readm('h'    ,'./tcini.m');
}
import_vals('./tcini.m',\%vars);
require './tc.data.tmp';
$Q=$q*$h;
$N     = readm('N'    ,'./tcini.m');
if ($heat) {
    $heat_bulk=10;		# In the heat eq. test we choose an
				# almost linear case (from 10 in the bulk
				# to 11 in the wall)
    $heat_wall=11;
    @state=($vars{'use_log_vars'} ? log($heat_bulk) : $heat_bulk);
}
_:>// 

#if !$heat
bottom_slope <:=-$slope:> 0
#endif

# SUPG conf
weak_form 0
addvisc 0.

# time stepping
local_time_step 0
auto_time_step 0
consistent_supg_matrix 1
#if $heat
Dt 0.01
nstep 1
#else
Dt 2
nstep 1
#endif
alpha 1

# para correr con mass lumping
#if 1
beta_supg 0
lumped_mass 1
#endif

# standard saving
save_file "state.out.tmp"
nsave 10

#if !$heat
# initialization
#initial_state "state.out.tmp"
initial_state "tc.ini.tmp"
#else
initial_state "<:makeini(\@state,2*($N+1),'heat.ini.tmp'):>"
#endif

# "rotary saving" 
save_file_pattern "outvector%d.out"
nsaverot 1
nrec  100
nfile 2

# saving some
nsome 1
print_some_file "nodes.some"
save_file_some "some.tmp"

# Newton loop
nnwt <:=($heat? 1 : 5):>
#omega_newton 0.3
tol_newton 1e-10
preco_type "lu"

# convergence parameters. Internal GMRES loop. 
rtol 0
atol 0
dtol 1e10
maxits 2
print_internal_loop_conv 0

#if $heat
# Physical properties
advective_jacobians 0. 0.
diffusive_jacobians 0.01
#endif
__END_HASH__

#===========================================================
#      ndim nu       ndof
nodes   2   3  <:=($heat? 1 : 5):>
__INCLUDE__ turbchanw.nod.tmp
__END_NODES__

#===========================================================
elemset advdif_<:=($heat? "advecfm2" : "swfm2t"):> 4
log_vars_list <:=($heat? "1 " :"4 5  # use log vars for k and epsilon"):> 

#Datos del elemento
geometry cartesian2d
ndim 2
npg 4

#lumped_mass 0
chunk_size 500
__END_HASH__
__INCLUDE__ turbchanw.con.tmp
__END_ELEMSET__

#================================================================
#if 0
elemset bcconv_adv_swfm2t 2
npg 2
ndim 2
geometry cartesian1d

__END_HASH__

2 1
<:=2*$N+2:>  <:=2*$N+1:> 
__END_ELEMSET__
#endif

end_elemsets

#================================================================
fixa
#if $heat
1 1 <:=($vars{'use_log_vars'} ? log($heat_wall) : $heat_wall):>
2 1 <:=($vars{'use_log_vars'} ? log($heat_wall) : $heat_wall):>
#else
1 1 <:=.9*$q*$h:>		# u = some value
1 2 0				# v = 0              at the wall

<:=2*$N+1:> 2 0.		# v=0 at the outer region
#endif

__END_FIXA__

#================================================================
#if !$heat
constraint
__INCLUDE__ turbchanw.peri.tmp

__END_CONSTRAINT__
#endif
