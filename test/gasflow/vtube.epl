# -*- mode: shell-script -*-
# case: <:=$ENV{'case'}:>
<:                              # starts ePerl block
#__TRANSCRIPT__
require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";# Initializes ePerl 

$use_tetra = 0;
$axisymm = 1;			# do an axisymmetric calculation with
				# one layer of elements
$compressible = ("$ENV{'incomp'}" ? 0 : 1);
$hot_outlet = 1;
$cold_outlet = 1;
$small_test = 0;

$R0 = 0.047;			# [m] Radius of tube
$L0 = ($small_test ? 
    2*$R0 : 0.520);		# [m] Length of tube
$Rc = 0.0175;			# [m] Radius of cold outlet
$Rin = 0.003;			# [m] Radius of small excluded cylinder at axis
$z_ratio = 8;			# refinement in `z' (axial) direction
$r_ratio = 2;			# refinement in radial direction

$Dz_h = 0.0104;			# [m] Axial span of hot outlet (0.02*L0)
if (0) {
    $A_in = 3.63e-4;		# [m2] inlet area
    $Dz_in = $A_in/(2*$PI*$R0);	# [m] Axial span of inlet
} else {
    $Dz_in = $Dz_h;		# [m] Axial span of inlet
    $A_in = (2*$PI*$R0)*$Dz_in;	# [m2] inlet area
}

## Mesh parameters
$refine = ($small_test ? 
    4 : 8);			# scale all N's by this
$Nz = 8*$refine;		# number of elements in axial direction
$Nr = 4*$refine;		# number of elements in radial direction
$Nphi = 16*$refine;		# number of elements in circumferential direction

# $Dz_in = $Dz_h; # [m] Axial span of inlet (temporarily set equal to the outlet 

$mass_flow_in = 0.12;		# [kg/s] mass flow at inlet
$p_in = 200000;			# [N/m2] pressure at inlet
$T_in = 500;			# [K] temperature at inlet
$cut = 0.5;			# [1] ratio of cold to hot flow rate

## PHYSICAL DATA
$Pr      =  0.72;		# [1] Prandtl
$Rgas    =  287.;		# [J/K kg] Gas constant for air
$ga      =   1.4;		# [1] gamma (Cp/Cv)
$Cv      = $Rgas/($ga-1);	# [J/K kg] specific heat at constant volume
$Cp      = $ga*$Cv;		# [J/K kg] specific heat at constant pressure
$g_body  =  0;			# [N/m3] force per volume (may be gravity)
$gravity = -9.8;		# [m/s2] normal acceleration of gravity

## INLET
$rho_in = $p_in/($Rgas*$T_in);	# [kg/m3] density
$u_rad_in = $mass_flow_in/
    ($A_in*$rho_in);		# [m/s] radial velocity
$u_circunf_in = 200;		# [m/s] tangential velocity

# viscosity (set by Re number)
#  $Re = 1e3;			# [1] Reynolds based on diameter
#  $visco = $rho_in
#      *$u_circunf_in*2*$R0/$Re;	# [kg/m s]viscosity
$visco = 1e-3;			# [kg/m s]viscosity
$cond    = $Cp*$visco/$Pr;	# [W/m K] conductivity of air

## COLD OUTLET
$p_c = 1.2e5;			# [N/m2] outlet cold pressure

## HOT OUTLET
$p_h = 1.38e5;			# [N/m2] outlet cold pressure

# require './data.pl';
$weak_form  = 0;
#__END_TRANSCRIPT__
@vars = qw(R0 L0 Rc Rin z_ratio r_ratio Nr Nz Nphi Dz_h Dz_in
		rho_in u_rad_in u_circunf_in p_in p_h p_c 
		compressible axisymm hot_outlet cold_outlet);
transcript("", @vars);	# print variables on output
octave_export_vars(">data.m.tmp",@vars);
system "octave -qH mkvtube.m > mkvtube.out.tmp";
require './vtube.data.tmp';
#
## Mass flow per circumferential slab
$Q = $mass_flow_in*$Dphi/(2.0*$PI);
if ($use_tetra) {
    system "../../tools/hexasplit.bin -i vtube.con.tmp -o vtube.con-tetra.tmp".
    " > hexasplit.out.tmp";
}
:>//                            # ends ePerl block

## Derived quantities:
## ==================
# <:pr('cut'):>
# <:pr('Q'):>
# <:pr('Dphi'):>
# <:pr('u_rad_in'):>
# <:pr('u_circunf_in'):>
# <:pr('compressible'):>
##================================================================
global_options

nstep 1000
alpha 1.

# initial_state "vtube.ini.tmp"
# initial_state "vtube.state.tmp"
initial_state "vtube.state_hot_only"
nsave 1
save_file "vtube.state.tmp"

save_file_pattern "vtube.state_%d.tmp"
nsaverot 1
nrec 1
nfile 100000000

# type of solver (may be "iisd", "petsc"...)
solver "iisd"
preco_type "jacobi"

maxits 100
iisd_subpart_auto 2000

# file containing the weight (speed) of processors
proc_weights weights.dat

#    Iterative parameters
tol_tet 1e-5
tol_newton 1e-10
atol 0
rtol 1e-7
dtol 1e3
nnwt 3
# omega_newton 0.01

print_internal_loop_conv

Dt 1e-5
weak_form 0
temporal_stability_factor 0

shock_capturing_factor 0

ndim 3
#if $compressible
<:pr('visco'):> 
<:pr('Rgas'):> 
C_mu 0.
<:pr('ga'):> 
<:pr('cond'):> 
#else
viscosity <:=$visco:>
#endif
#if $compressible && $axisymm
axisymmetric "z"
#endif
gather_file "vtube.mass_flow_rate.tmp"
ngather 3

hook_list dl_generic_hook cut_regulator

cut_regulator.filename ./gasflow.efn
cut_regulator.prefix   cut_regulator_hook

__END_HASH__

##================================================================
table cut_regulator
#if $cold_outlet
nstream 2
initial_pressure <:=$p_h:> <:=$p_c:>
flow_rate <:=(1-$cut):> <:=$cut:>
gather_pos 1 2
#else
nstream 1
initial_pressure <:=$p_h:>
flow_rate 1.
gather_pos 1
#endif
flow_coef 1e2
__END_HASH__

##================================================================
# ndim nu ndof
nodedata  3  3  <:=($compressible ? 5 : 4):>
data vtube.nod.tmp
__END_HASH__

##================================================================
elemset <:=($compressible ? 'gasflow' : 'nsi_tet_les_fm2'):> \
			    <:= ($use_tetra ? 4 : 8):>
geometry <:=($use_tetra ? "tetra" : "cartesian3d"):>
npg <:= ($use_tetra ? 4 : 8):>
# report_consumed_time
data vtube.con<:=($use_tetra ? "-tetra" : ""):>.tmp
__END_HASH__

##================================================================
elemset flow_rate_integrator 4
name "inlet_mass_flow"
gather_length 1
gather_pos 0
module "compressible_NS"
npg 4
__END_HASH__
__INCLUDE__ "vtube.inlet_flow_rate.tmp"
__END_ELEMSET__

##================================================================
#if $hot_outlet
elemset flow_rate_integrator 4
name "hot_outlet_mass_flow"
gather_length 1
gather_pos 1
module "compressible_NS"
npg 4
__END_HASH__
__INCLUDE__ "vtube.hot_outlet_flow_rate.tmp"
__END_ELEMSET__
#endif

##================================================================
#if $cold_outlet
elemset flow_rate_integrator 4
name "cold_outlet_mass_flow"
gather_length 1
gather_pos 2
module "compressible_NS"
npg 4
gather_pos 2
__END_HASH__
__INCLUDE__ "vtube.cold_outlet_flow_rate.tmp"
__END_ELEMSET__
#endif

end_elemsets

##================================================================
fixa_amplitude dl_generic
ext_filename "./gasflow.efn"
function_name "flow_controller"
cut_regulator "cut_regulator"
index 0
__END_HASH__
__INCLUDE__ vtube.fixa_hot_outlet.tmp
__END_FIXA__

##================================================================
#if $cold_outlet
fixa_amplitude dl_generic
ext_filename "./gasflow.efn"
function_name "flow_controller"
cut_regulator "cut_regulator"
index 1
__END_HASH__
__INCLUDE__ vtube.fixa_cold_outlet.tmp
__END_FIXA__
#endif

##================================================================
fixa
__INCLUDE__ vtube.fixa.tmp
#if !$compressible
## Fix pressure at some node
<:=($Nr+2):> 4 0.
#endif
__END_FIXA__

##================================================================
constraint
__INCLUDE__ vtube.peri.tmp
__END_CONSTRAINT__
