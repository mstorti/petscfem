# -*- mode: shell-script -*-
# case: <:=$ENV{'case'}:>
<:                              # starts ePerl block
#__TRANSCRIPT__
require "../../test/eperlini.pl";# Initializes ePerl 
$compressible = 1;
## Mesh parameters
$Nr = 40;			# number of elements in radial direction

$R0 = 0.047;			# [m] Radius of tube
$Rin = 0.003;			# [m] Radius of small excluded cylinder at axis
$r_ratio = 4;			# refinement in radial direction

$p_in = 200000;			# [N/m2] pressure at inlet
$T_in = 294;			# [K] temperature at inlet

## PHYSICAL DATA
$Pr      =  0.72;		# [1] Prandtl
$Pr      = 10*$Pr;		# ??
$Rgas    =  287.;		# [J/K kg] Gas constant for air
$ga      =   1.4;		# [1] gamma (Cp/Cv)
$Cv      = $Rgas/($ga-1);	# [J/K kg] specific heat at constant volume
$Cp      = $ga*$Cv;		# [J/K kg] specific heat at constant pressure
$g_body  =  0;			# [N/m3] force per volume (may be gravity)
$gravity = -9.8;		# [m/s2] normal acceleration of gravity

$rho_in = 1.;			# [kg/m3]
$u_circunf_in = 200;		# [m/s] radial velocity at exterior radius
$Re = 1e6;			# [1] Reynolds based on diameter
$visco   =  $rho_in
    *$u_circunf_in*2*$R0/$Re;	# [kg/m s]viscosity
$cond    = $Cp*$visco/$Pr;	# [W/m K] conductivity of air
$W = $u_circunf_in/$R0;		# [1/s] rotation angular velocity

#__END_TRANSCRIPT__
@vars = qw(R0 Rin r_ratio Nr rho_in u_rad_in u_circunf_in p_in p_h p_c W);
transcript("", @vars);	# print variables on output
octave_export_vars(">data.m.tmp",@vars);
system "octave -qH mkstrip.m > mkstrip.out.tmp";
:>//                            # ends ePerl block

##================================================================
global_options

nstep 50
alpha 1.

initial_state "strip.ini.tmp"
# initial_state "strip.state.tmp"
save_file "strip.state.tmp" 
nsave 1

save_file_pattern "strip.state_%d.tmp"
nsaverot 1
nrec 1
nfile 100000000

# type of solver (may be "iisd", "petsc"...)
solver "iisd"
preco_type "jacobi"

maxits 100
iisd_subpart_auto 2000

# file containing the weight (speed) of processors
proc_weights weights.dat

#    Iterative parameters
tol_tet 1e-5
tol_newton 1e-10
atol 0
rtol 0
dtol 1e3
nnwt 2
# omega_newton 0.01

print_internal_loop_conv

Dt 0.001
weak_form 0
temporal_stability_factor 0

shock_capturing_factor 0

ndim 3
#if $compressible
<:pr('visco'):> 
<:pr('Rgas'):> 
C_mu 0.
<:pr('ga'):> 
<:pr('cond'):> 
#else
viscosity <:=$visco:>
#endif
report_consumed_time
__END_HASH__

##================================================================
# ndim nu ndof
nodedata  3  3  <:=($compressible ? 5 : 4):>
data strip.nod.tmp
__END_HASH__

##================================================================
elemset <:=($compressible ? 'gasflow' : 'nsi_tet_les_fm2'):> \
			    <:= ($use_tetra ? 4 : 8):>
geometry <:=($use_tetra ? "tetra" : "cartesian3d"):>
npg <:= ($use_tetra ? 4 : 8):>
data strip.con<:=($use_tetra ? "-tetra" : ""):>.tmp
__END_HASH__

end_elemsets

##================================================================
fixa
__INCLUDE__ strip.fixa.tmp
#if !$compressible
## Fix pressure at some node
1 4 0.
#endif
__END_FIXA__

##================================================================
constraint
__INCLUDE__ strip.peri.tmp
__END_CONSTRAINT__
