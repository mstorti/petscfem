#-*- shell-script -*-
<: 
$ndim=2;
$N=20;
$nnod = ($N+1)**2;
$in = "sqcav.con.tmp";
$view_v = 1;

open IN,$in;
open OUT,">sqcav.con0.tmp";
while (<IN>) {
    my @l = split " ";
    for my $ll (@l) { $ll = $ll-1; }
    print OUT "$l[0] $l[1] $l[3] $l[2]\n";
}
close IN;
close OUT;

open IN,"sqcav.weak_form_0.tmp";
open OUT,">results.tmp";
while (<IN>) {
    my @l = split " ";
    if ($view_v) { print OUT "$l[0] $l[1]\n" ; } 
    else { print OUT "$l[2]\n" ; } 
}
close IN;
close OUT;

:>//
# The following example describes an irregular grid. Note that the values
# of the "positions" component and "connections" component are irregular,
# and so must be enumerated.
#
# The irregular positions, which are ... three-dimensional points.
object "nodes" class array type float rank 1 shape 2 
         items <:=$nnod:> data file sqcav.nod.tmp

# The irregular connections, which are tetrahedra
object "icone" class array type int rank 1 shape 4 
        items <:=$N**2:> data file sqcav.con0.tmp

attribute "element type" string "quads"
attribute "ref" string "positions"
# The data, which is in a one-to-one correspondence with the positions
object "result" class array type float rank <:=($view_v ? "1 shape $ndim" : 0):>
	    items <:=$nnod:> data file results.tmp

attribute "dep" string "positions"
# the field, with three components: "positions", "connections", and
# "data"
object "irregular positions irregular connections" class field
component "positions" value "nodes"
component "connections" value "icone"
component "data" value "result"
end
