# -*- mode: shell-script -*-
# case: <:=$ENV{'case'}:>
<:                              # starts ePerl block
#__TRANSCRIPT__
require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";# Initializes ePerl 
get_var_env('case','lu');
get_var_env('theta',0);
print "# incoming `case' : $case\n";
$shell_hook_case = 0;
if ($case eq 'shell_hook') {
    $shell_hook_case = 1;
    $case = 'g3d_ref';
}
if ($case eq 'shell_hook2') {
    $shell_hook_case = 2;
    $case = 'g3d_ref';
}
if ($case =~ /^g3d_(.*)$/) { 
    $case = 'lu'; 
    $subcase = $1;
    $g3d = 0;
    if ($subcase ne 'ref') {
	$g3d = 1;
	$theta = $subcase;
    }
}
$L = 1;				# Side of the cavity
$N = 10;
$hratio = 0;			# refinement (h_center/h_wall)
$solver = "petsc";
$preco_type = "lu";
$maxits = 1;
$nstep = 5;
$save_file = ($case ? "qharm.$case.tmp" : "qharm.state.tmp");
#
$weak_form = 0;
# `scalar' avoids returning the first match, which can be zero
# and then can be interpreted as `false' 
if (scalar $case =~ /weak_form_(\d)/) {
    $weak_form = $1;
} elsif ($case eq 'lu') {
    $solver = "petsc";
    $preco_type = "lu";
    $maxits = 1;
    $nstep = 2;
} elsif ($case =~ /^iisd/) {
    $solver = "iisd";
    $iisd_subpart = 2;
    $maxits = 200;
    $nstep = 2;
    $iisd_subpart = $1 if $case=~/sbp(\d*)/;
    $preco_type = "jacobi";
} elsif ($case =~ /^petsc/) {
    $solver = "petsc";
    $preco_type = "jacobi";
    $maxits = 200;
    $nstep = 2;
} else {
    die "don't know case $case\n";
}
#
#__END_TRANSCRIPT__
transcript("", qw(viscosity Dt));	# print variables on output
octave_export_vars(">data.m.tmp",qw(U L N Re viscosity h Co Dt 
	hratio g3d theta));
:>//                            # ends ePerl block
# <:pr('case'):>
# <:pr('subcase'):>
# <:pr('theta'):>
global_options

ndim <:=($g3d ? 3 : 2):>
nsave 5
<:pr('nstep'):> 
# initial_state qharm.state
<:pr('save_file'):> 

# type of solver (may be "iisd", "petsc"...)
<:pr('solver'):>
<:pr('preco_type'):> 
<:pr('maxits'):> 
# Number of subdomains
<:pr('iisd_subpart'):>

# file containing the weight (speed) of processors
proc_weights weights.dat

#    Iterative parameters
tol_tet 1e-5
tol_newton 1e-10
atol 0
rtol 1e-6
dtol 1e3
nnwt 1

Krylov_dim <:=$maxits:>
print_internal_loop_conv 1
#print_linear_system_and_stop 1
#verify_jacobian_with_numerical_one 1

#print_nodal_partitioning 1
Dt 0.01
# steady 

#if $shell_hook_case==1
hook_list shell_hook shell_hook
#elsif $shell_hook_case==2
hook_list shell_hook shell_hook
shell_hook "echo stage %s, step %d, time %f"
#endif

# print_dofmap_id
__END_HASH__

# ndim nu ndof
nodes  <:=($g3d ? '3  3' : '2 2'):> 1
__INCLUDE__ qharm.nod.tmp
_END_NODES__

elemset qharm 4 
name malla
ndimel 2
geometry cartesian2d
npg 4
# Physical data
#
__END_HASH__
__INCLUDE__ qharm.con.tmp
__END_ELEMSET__

end_elemsets

#if 0
fixa
# Set value at the wall
__INCLUDE__ qharm.fixa.tmp
__END_FIXA__
#endif
