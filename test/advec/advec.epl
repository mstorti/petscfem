<:                              # starts ePerl block
#__TRANSCRIPT__
require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";       # Initializes ePerl 
$case_name = $ENV{'case_name'};                   # case name
print "# case_name $case_name\n";
$case_name = 'skew' unless $case_name;
$N = 80;
$M = 80;
$Lx = $Ly = 1;
$ydisc = 0.25;
$delta = 0.01;
$ux = 2;
$uy = 1;
$alpha = 1;
$xini = $yini = 0.5;
$Omega = 0;
$cone = 0;
if ($case_name =~ /cone/) {
    $cone = 1;
    $N = 100;
    $M = 100;
    $Lx = 5;
    $Ly = 5;
    $ux = 1;
    $uy = 1;
    $alpha = 0.5;
    $Courant = 0.5;
    $hx = $Lx/$N;
    $Dt = $Courant*$hx/$ux;
    $Tend = 3.5;
    $nstep = ceil($Tend/$Dt);
} 

if ($case_name eq 'parallel_cone') {
    print "# using \"parallel_cone\" options\n";
    $N = 50;
    $M = 20;
    $Lx = 2.5;
    $Ly = 1;
    $ux = 1;
    $uy = 0;
    $alpha = 0.5;
    $Courant = 0.5;
    $hx = $Lx/$N;
    $Dt = $Courant*$hx/$ux;
    $Tend = 1.5;
    $nstep = ceil($Tend/$Dt);
    $case_name = 'cone';
} 
#
if ($case_name eq 'skew_cone') {
    $N = 100;
    $M = 100;
    $Lx = 5;
    $Ly = 5;
    $ux = 1;
    $uy = 1;
    $alpha = 0.5;
    $Courant = 0.5;
    $hx = $Lx/$N;
    $Dt = $Courant*$hx/$ux;
    $Tend = 3.5;
    $nstep = ceil($Tend/$Dt);
}
if ($case_name =~ /cone/) {
    $traversed_length = sqrt($ux**2+$uy**2)*$Tend;
}    
if ($case_name eq 'rotating_cone') {
    my $R = sqrt(($Lx/2-$xini)**2 + ($Ly/2-$yini)**2);
    $traversed_length = $Omega*$R*$Tend;
}
if ($case_name eq 'rotating_cone') {
    $N = $M = 160;
    $Lx = $Ly = 3;
    $Omega = 1.2/($Lx/2);
    $uy = 1;
    $alpha = 0.5;
    $Courant = 0.5;
    $hx = $Lx/$N;
    $Dt = $Courant*$hx/$ux;
    $Tend = 2*$PI/$Omega;
    $nstep = ceil($Tend/$Dt);
    $xini = $Lx/2;
    $yini = 0.5;
}
#__END_TRANSCRIPT__
@vars = qw(N M Lx Ly delta ydisc traversed_length Tend
        ux uy case_name Courant xini yini cone Omega);
transcript("", @vars);	# print variables on output and transcript this block
octave_export_vars(">data.m.tmp",@vars);
system "octave -qH advec.m";
:>//                            # ends ePerl block

# <:pr('case_name'):>
#===========================================================
global_options
ndim 2

save_file "save.state.tmp"
save_file_pattern "outvector.out.tmp"
#if $case_name eq 'skew'
steady
nstep 1
#elsif $case_name =~ /cone/
<:pr('Dt'):>
nsave 10
nsaverot 10
initial_state "advec.ini.tmp"
<:pr('nstep'):>
#endif
solver "iisd"
iisd_subpart 1
nnwt 1
<:pr('alpha'):>
weak_form 0
__END_HASH__

#===========================================================
# ndim nu ndof
nodedata   2  2  1
data advec.nod.tmp
__END_HASH__

#===========================================================
elemset newadvdif_advecfm2 3
#if $case_name eq 'rotating_cone'
props advective_jacobians[2]
#else
advective_jacobians <:=$ux:> <:=$uy:> 
#endif
geometry triangle
npg 3
diffusive_jacobians 0.
# data advec.con.tmp
__END_HASH__
__INCLUDE__ advec.con.tmp
__END_ELEMSET__

end_elemsets

#===========================================================
fixa

__INCLUDE__ "advec.fixa.tmp"
#if !$case_name ne 'rotating_cone' && $uy > 0.
__INCLUDE__ "advec.fixa-y0.tmp"
#endif
__END_FIXA__

# Local Variables: $
# mode: shell-script $
# eval: (setq indent-tabs-mode nil) $
# End: $
