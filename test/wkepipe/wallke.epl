<:
require '../eperlini.pl';       # Initializes ePerl 
:>//                            # ends ePerl block

__ECHO_ON__
#default definitions
#===========================================================
global_options
ndim 3

save_file "save.state"
nsave 20

#rtol 1e-2
rtol 0
atol 0
maxits 100

save_file_pattern "outvector%d.out"
#nsaverot 1000000

initial_state "save.state"
#initial_state "wallke.ini.tmp"
print_some_file "wallke.some"
save_file_some "wallke.some.tmp"
nsome 1

alpha 1.
nstep 1000
nnwt 3
tol_newton 0
preco_type "lu"
Dt 0.3

#print_linear_system_and_stop
#solve_system 0
#<:
#__TRANSCRIPT__
$L = 1;                         # Semi distance between plates
$N = 32;                        # Number of elements 
$Nlay = 2*$N+4;                 # Number of nodes in a 2D layer
$hratio = 5;                    # refinement near the wall
$Re_d = 100000;                  # Re deseado
$lambda = ($Re_d<3000 ? 
     64/$Re_d : 0.3164/$Re_d**0.25); # resistance coefficient
$Umax = 1;                      # Max vel in the channel
$Uav = 0.5*$Umax;               # Aver vel 
$Q = $Uav * $PI*$L**2;          # Volumetric flow rate
$nu = $Uav*2*$L/$Re_d;          # kinematic visc.
$g = $lambda/(4*$L)*$Uav**2;    # body force
$y_wall_plus =  50;
$C_mu =  0.09;
$von_Karman_cnst = 0.4;
#__END_TRANSCRIPT__
transcript();
doc_vals(qw(lambda Umax Uav Q nu g));
octave_export_vars("data.m.tmp",qw(nu g N hratio L y_wall_plus 
                        C_mu von_Karman_cnst));
:>

y_wall_plus <:= $y_wall_plus:>
#turbulence_coef 1.
viscosity <:=$nu:>
G_body 0. <:=$g:> 0

weak_form 0 # todavia no tenemos el weak form para k-e (???)
__ECHO_OFF__

__END_HASH__

# ndim nu ndof
nodes   3  3  6
__INCLUDE__ wallke.nod.tmp
__END_NODES__

#===========================================================
elemset nsi_tet_keps 8
#Datos del elemento
geometry cartesian3d
npg 8
__END_HASH__
__INCLUDE__ wallke.con.tmp
__END_ELEMSET__

elemset wallke 4
geometry cartesian2d
npg 4
__END_HASH__
1 2 <:=$Nlay+2:> <:=$Nlay+1:> 
__END_ELEMSET__

elemset wall_law_res 2
lagrange_diagonal_factor 1e-5
__END_HASH__
1 <:=2*$N+3:> 
2 <:=2*$N+4:> 
<:=$Nlay+1:> <:=$Nlay+2*$N+3:> 
<:=$Nlay+2:> <:=$Nlay+2*$N+4:> 
__END_ELEMSET__

end_elemsets

#===========================================================
fixa

# pressure fixed at some node
<:=2*$N-1:> 4  0.

# Fictitious node (leave 2 dof's for the wall eqs.)
<:=2*$N+3:> 3 0.
<:=2*$N+3:> 4 0.
<:=2*$N+3:> 5 0.
<:=2*$N+3:> 6 0.

<:=$Nlay+2*$N+3:> 3 0.
<:=$Nlay+2*$N+3:> 4 0.
<:=$Nlay+2*$N+3:> 5 0.
<:=$Nlay+2*$N+3:> 6 0.

#__INCLUDE__ wallke.fixa.tmp

__END_FIXA__

constraint

__INCLUDE__ wallke.peri.tmp

#  # Fictitious node periodic 
#  -1. <:=2*$N+4:> 1 1. <:=2*$N+3:> 1
#  -1. <:=2*$N+4:> 2 1. <:=2*$N+3:> 2
#  -1. <:=2*$N+4:> 3 1. <:=2*$N+3:> 3
#  -1. <:=2*$N+4:> 4 1. <:=2*$N+3:> 4
#  -1. <:=2*$N+4:> 5 1. <:=2*$N+3:> 5

#  -1. <:=$Nlay+2*$N+4:> 1 1. <:=$Nlay+2*$N+3:> 1
#  -1. <:=$Nlay+2*$N+4:> 2 1. <:=$Nlay+2*$N+3:> 2
#  -1. <:=$Nlay+2*$N+4:> 3 1. <:=$Nlay+2*$N+3:> 3
#  -1. <:=$Nlay+2*$N+4:> 4 1. <:=$Nlay+2*$N+3:> 4
#  -1. <:=$Nlay+2*$N+4:> 5 1. <:=$Nlay+2*$N+3:> 5

__END_CONSTRAINT__

# Local Variables: $
# mode: shell-script $
# eval: (setq indent-tabs-mode nil) $
# End: $
