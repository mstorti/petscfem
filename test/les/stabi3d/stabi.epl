# -*- mode: shell-script -*-
#
<:require '../../eperlini.pl':>// # Initializes ePerl 
# ---- <>  ---- <>  ---- <>  ---- <>  ---- <>  ---- <>  ---- <>

__ECHO_ON__
<: 
#__TRANSCRIPT__
$hratio=4;			# refinement ratio center/wall
$Rel=10000;			# Reynolds number
$Lx=4;				# Length in the longitudinal direction
$Ly=1;				# Plate separation
$Lz=$Lx;			# Length in transversal (periodic)  direction
$Nx=40;				# number of elements in x direction
$Ny=40;				# number of elements in y direction
$Nz=40;				# number of elements in z direction

$hav = $Ly/$Ny;			# typical mesh size in `y' direction
$havx = $Lx/$Nx;		# typical mesh size in `x' direction
$Courant = 0.8;			# Courant number
$ndim=3;
$u_max=1;			# Maximum velocity
$u_av = (2/3)*$u_max;		# Average velocity
$nu=$u_av * $Ly / $Rel;		# Kinematic viscosity 
$dpdx= 8*$nu*$u_max/$Ly**2;	# Longitudinal pressure gradient 
#__END_TRANSCRIPT__
transcript();
octave_export_vars(">data.m.tmp",qw(R Nx Ny Nz hratio nlay Rel stokes Lx Ly Lz));
:>//

global_options

nsave 20
#save_file_pattern stabi.state.%d.tmp
nsaverot 50
nfile 2
nrec 20
save_file stabi.state.tmp
proc_weights weights.dat
<:pr('ndim'):>
report_consumed_time
print_some_file "stabi.some.tmp"
save_file_some "stabi.some_rslt.tmp"
nsome 1
Krylov_dim 200

#    Iterative parameters
#if 0
nnwt 5
steady
nstep 1
#else
nnwt 2
steady 0
nstep 1000
#endif

# Compute time step from Courant number
Dt <:=$havx/$u_max*$Courant:>
LES 0
G_body <:=$dpdx:> 0. 0.
alpha 0.65
solver "iisd"
preco_type "jacobi"

print_internal_loop_conv
iisd_subpart_auto 2000
iisdmat_print_statistics
print_partitioning_statistics
max_partgraph_vertices 4000
max_partgraph_vertices_proc 4000
save_file_pattern "outvector%d.out.tmp"
initial_state "stabi.ini.tmp"

# print_linear_system_and_stop
# solve_system 0
# Datos fisicos
#
__ECHO_OFF__
__END_HASH__

#================================================================
# ndim nu ndof
nodedata  <:=$ndim:> <:=$ndim:> <:=$ndim+1:> 
data stabi.nod.tmp
__END_HASH__

#================================================================
elemset nsi_tet_les_fm2 <:=2**$ndim:>
props 
name malla 
geometry cartesian<:=$ndim:>d
npg <:=2**$ndim:>
LES 0
viscosity <:=$nu:>
weak_form 1
__END_HASH__
__INCLUDE__ stabi.con.tmp
__END_ELEMSET__

#================================================================
fixa
# u,v  fixations at walls
__INCLUDE__ stabi.fixaw.tmp
# Fix pressure at some node only for the base flow
1 <:=$ndim+1:> 0.
__END_FIXA__

#================================================================
constraint
__INCLUDE__ stabi.peri.tmp
__END_CONSTRAINT__
