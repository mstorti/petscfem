//
// time: Sun Nov 24 21:03:00 2002
//
// version: 3.1.2 (format), 4.2.0 (DX)
//
//
// MODULE main
//
// comment: A general purpose visual program for gridded, three-dimensional data has been used.
// comment: 
// comment: For scalar, position-dependent data, an translucent isosurface is created. You can change the isosurface value using the interactor in the control panel. Otherwise, glyphs are drawn.
// comment: 
// comment: In either case, a colored cutting plane has been drawn through the data. You can use the interactor in the control panel to change the normal, or orientation, of the cutting plane.
// comment: 
// comment: If you would like to modify or use this visual program in the future, choose Open Visual Program Editor from the Windows menu, and then choose Save As from the File menu of the VPE.
// page assignment: image	order=5, windowed=0, showing=0
// page assignment: import	order=2, windowed=0, showing=0
// page assignment: iso_or_glyph	order=3, windowed=0, showing=0
// page assignment: maptoplane	order=4, windowed=0, showing=1
// workspace: width = 792, height = 513
// layout: snap = 0, width = 50, height = 50, align = NN
//
macro main(
) -> (
) {
    // 
    // node Import[1]: x = 170, y = 200, inputs = 6, label = Import
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "/home/mstorti/PETSC/petscfem/test/les/stabi3d/viewer_tmp.dx"
    // page group: import
    //
main_Import_1_out_1 = 
    Import(
    main_Import_1_in_1,
    main_Import_1_in_2,
    main_Import_1_in_3,
    main_Import_1_in_4,
    main_Import_1_in_5,
    main_Import_1_in_6
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[1]: x = 193, y = 287, inputs = 1, label = imported
    // page group: import
    //
imported = main_Import_1_out_1;
    // 
    // node Receiver[2]: x = 36, y = 45, inputs = 1, label = imported
    // page group: maptoplane
    //
main_Receiver_2_out_1[cache: 0] = imported;
    // 
    // node Sequencer[1]: x = 168, y = 62, inputs = 7, label = Sequencer
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Sequencer_1"
    // input[4]: defaulting = 1, visible = 1, type = 1, value = 1
    // input[5]: defaulting = 1, visible = 1, type = 1, value = 100
    // input[6]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[7]: defaulting = 0, visible = 0, type = 16777217, value = { 1 100 1 1 100 1 }
    // page group: maptoplane
    // vcr[1]: min = 1, max = 100, beg = 1, end = 100, cur = 1, inc = 1, loop = on, step = off, pal = on
    // window: position = (0.0175,0.0300), size = 0.3500x0.1333
    //
    main_Sequencer_1_out_1 = @frame;
    // 
    // node Compute[6]: x = 293, y = 164, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[(2.*float($0)/100),0.5,1]"
    // page group: maptoplane
    // expression: value = [(2.*float(n)/100),0.5,1]
    // name[2]: value = n
    //
main_Compute_6_out_1 = 
    Compute(
    main_Compute_6_in_1,
    main_Sequencer_1_out_1
    ) [instance: 6, cache: 1];
    // 
    // node MapToPlane[4]: x = 282, y = 266, inputs = 3, label = MapToPlane
    // input[3]: defaulting = 0, visible = 1, type = 8, value = [1 0 0]
    // page group: maptoplane
    //
main_MapToPlane_4_out_1 = 
    MapToPlane(
    main_Receiver_2_out_1,
    main_Compute_6_out_1,
    main_MapToPlane_4_in_3
    ) [instance: 4, cache: 1];
    // 
    // node Colormap[4]: x = 408, y = 276, inputs = 19, label = Colormap
    // input[1]: defaulting = 0, visible = 0, type = 16777224, value = { [0.0 0.666667] [1.0 0.0] }
    // input[2]: defaulting = 0, visible = 0, type = 16777224, value = { [0.0 1.0] [1.0 1.0] }
    // input[3]: defaulting = 0, visible = 0, type = 16777224, value = { [0.0 1.0] [1.0 1.0] }
    // input[4]: defaulting = 0, visible = 0, type = 16777224, value = { [0.0 1.0] [1.0 1.0] }
    // input[5]: defaulting = 0, visible = 0, type = 32, value = "Colormap_4"
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 0.0
    // input[8]: defaulting = 1, visible = 0, type = 5, value = 0.86211973
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 20
    // input[10]: defaulting = 1, visible = 1, type = 2048, value = NULL
    // input[12]: defaulting = 0, visible = 0, type = 16777221, value = { 0.0 0.86211973 }
    // input[17]: defaulting = 0, visible = 0, type = 5, value = 0.0
    // input[18]: defaulting = 0, visible = 0, type = 5, value = 0.86211973
    // page group: maptoplane
    // window: position = (0.5138,0.0000), size = 0.6875x0.5000
    //
main_Colormap_4_out_1[cache: 2],
main_Colormap_4_out_2[cache: 2] = 
    Colormap(
    main_Colormap_4_in_1,
    main_Colormap_4_in_2,
    main_Colormap_4_in_3,
    main_Colormap_4_in_4,
    main_Colormap_4_in_5,
    main_Receiver_2_out_1,
    main_Colormap_4_in_7,
    main_Colormap_4_in_8,
    main_Colormap_4_in_9,
    main_Colormap_4_in_10,
    main_Colormap_4_in_11,
    main_Colormap_4_in_12,
    main_Colormap_4_in_13,
    main_Colormap_4_in_14,
    main_Colormap_4_in_15,
    main_Colormap_4_in_16,
    main_Colormap_4_in_17,
    main_Colormap_4_in_18,
    main_Colormap_4_in_19
    ) [instance: 4, cache: 1];
    // 
    // node Color[4]: x = 184, y = 373, inputs = 5, label = Color
    // page group: maptoplane
    //
main_Color_4_out_1 = 
    Color(
    main_MapToPlane_4_out_1,
    main_Colormap_4_out_1,
    main_Color_4_in_3,
    main_Color_4_in_4,
    main_Color_4_in_5
    ) [instance: 4, cache: 1];
    // 
    // node Transmitter[4]: x = 178, y = 451, inputs = 1, label = maptoplane
    // page group: maptoplane
    //
maptoplane = main_Color_4_out_1;
    // 
    // node Receiver[5]: x = 215, y = 89, inputs = 1, label = maptoplane
    // page group: image
    //
main_Receiver_5_out_1[cache: 0] = maptoplane;
    // 
    // node Collect[2]: x = 92, y = 211, inputs = 2, label = Collect
    // page group: image
    //
main_Collect_2_out_1 = 
    Collect(
    main_Collect_2_in_1,
    main_Receiver_5_out_1
    ) [instance: 2, cache: 1];
    // 
    // node AutoCamera[1]: x = 188, y = 273, inputs = 9, label = AutoCamera
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "off-diagonal"
    // page group: image
    //
main_AutoCamera_1_out_1 = 
    AutoCamera(
    main_Collect_2_out_1,
    main_AutoCamera_1_in_2,
    main_AutoCamera_1_in_3,
    main_AutoCamera_1_in_4,
    main_AutoCamera_1_in_5,
    main_AutoCamera_1_in_6,
    main_AutoCamera_1_in_7,
    main_AutoCamera_1_in_8,
    main_AutoCamera_1_in_9
    ) [instance: 1, cache: 1];
    // 
    // node Receiver[1]: x = 89, y = 33, inputs = 1, label = imported
    // page group: iso_or_glyph
    //
main_Receiver_1_out_1[cache: 0] = imported;
    // 
    // node Sample[1]: x = 349, y = 177, inputs = 2, label = Sample
    // input[2]: defaulting = 0, visible = 1, type = 1, value = 400
    // page group: iso_or_glyph
    //
main_Sample_1_out_1 = 
    Sample(
    main_Receiver_1_out_1,
    main_Sample_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node AutoGlyph[5]: x = 287, y = 423, inputs = 7, label = AutoGlyph
    // input[2]: defaulting = 1, visible = 1, type = 32, value = "arrow"
    // page group: iso_or_glyph
    //
main_AutoGlyph_5_out_1 = 
    AutoGlyph(
    main_Sample_1_out_1,
    main_AutoGlyph_5_in_2,
    main_AutoGlyph_5_in_3,
    main_AutoGlyph_5_in_4,
    main_AutoGlyph_5_in_5,
    main_AutoGlyph_5_in_6,
    main_AutoGlyph_5_in_7
    ) [instance: 5, cache: 1];
    // 
    // node Transmitter[5]: x = 396, y = 87, inputs = 1, label = frame
    // page group: maptoplane
    //
frame = main_Sequencer_1_out_1;
    // 
    // node Receiver[6]: x = 249, y = 40, inputs = 1, label = frame
    // page group: iso_or_glyph
    //
main_Receiver_6_out_1[cache: 0] = frame;
    // 
    // node Compute[4]: x = 227, y = 153, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "float($0)/100."
    // page group: iso_or_glyph
    // expression: value = float(n)/100.
    // name[2]: value = n
    //
main_Compute_4_out_1 = 
    Compute(
    main_Compute_4_in_1,
    main_Receiver_6_out_1
    ) [instance: 4, cache: 1];
    // 
    // node Isosurface[2]: x = 191, y = 253, inputs = 6, label = Isosurface
    // page group: iso_or_glyph
    //
main_Isosurface_2_out_1 = 
    Isosurface(
    main_Receiver_1_out_1,
    main_Compute_4_out_1,
    main_Isosurface_2_in_3,
    main_Isosurface_2_in_4,
    main_Isosurface_2_in_5,
    main_Isosurface_2_in_6
    ) [instance: 2, cache: 1];
    // 
    // node Color[5]: x = 166, y = 366, inputs = 5, label = Color
    // input[3]: defaulting = 0, visible = 1, type = 5, value = .4
    // page group: iso_or_glyph
    //
main_Color_5_out_1 = 
    Color(
    main_Isosurface_2_out_1,
    main_Color_5_in_2,
    main_Color_5_in_3,
    main_Color_5_in_4,
    main_Color_5_in_5
    ) [instance: 5, cache: 1];
    // 
    // node Inquire[2]: x = 0, y = 199, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is vector"
    // page group: iso_or_glyph
    //
main_Inquire_2_out_1 = 
    Inquire(
    main_Receiver_1_out_1,
    main_Inquire_2_in_2,
    main_Inquire_2_in_3
    ) [instance: 2, cache: 1];
    // 
    // node Inquire[3]: x = 93, y = 200, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is data dependent"
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "connections"
    // page group: iso_or_glyph
    //
main_Inquire_3_out_1 = 
    Inquire(
    main_Receiver_1_out_1,
    main_Inquire_3_in_2,
    main_Inquire_3_in_3
    ) [instance: 3, cache: 1];
    // 
    // node Compute[1]: x = 16, y = 368, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0 || $1 ? 2 : 1"
    // page group: iso_or_glyph
    // expression: value = is_vector || is_dep_connections ? 2 : 1
    // name[2]: value = is_vector
    // name[3]: value = is_dep_connections
    //
main_Compute_1_out_1 = 
    Compute(
    main_Compute_1_in_1,
    main_Inquire_2_out_1,
    main_Inquire_3_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Compute[3]: x = 91, y = 164, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[1.,0.5, (2.*float($0)/100)]"
    // page group: maptoplane
    // expression: value = [1.,0.5, (2.*float(n)/100)]
    // name[2]: value = n
    //
main_Compute_3_out_1 = 
    Compute(
    main_Compute_3_in_1,
    main_Sequencer_1_out_1
    ) [instance: 3, cache: 1];
    // 
    // node Compute[5]: x = 192, y = 163, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[1., (float($0)/100),1]"
    // page group: maptoplane
    // expression: value = [1., (float(n)/100),1]
    // name[2]: value = n
    //
main_Compute_5_out_1 = 
    Compute(
    main_Compute_5_in_1,
    main_Sequencer_1_out_1
    ) [instance: 5, cache: 1];
    // 
    // node Reset[4]: x = 309, y = 307, inputs = 6, label = Reset
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "main_Reset_4_out_1"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 0
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 0, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 0, type = 29, value = 0
    // output[1]: visible = 1, type = 29, value = 0
    // page group: image
    // toggle : 0
    //
    // 
    // node Image[5]: x = 106, y = 385, inputs = 49, label = Image
    // input[1]: defaulting = 0, visible = 0, type = 67108863, value = "Image_5"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[5]: defaulting = 0, visible = 0, type = 8, value = [0.355465 0.494851 1.0035]
    // input[6]: defaulting = 0, visible = 0, type = 8, value = [3.20957 0.494851 1.0035]
    // input[7]: defaulting = 0, visible = 0, type = 5, value = 2.02484
    // input[8]: defaulting = 0, visible = 0, type = 1, value = 776
    // input[9]: defaulting = 0, visible = 0, type = 5, value = 0.682
    // input[10]: defaulting = 0, visible = 0, type = 8, value = [0 1 0]
    // input[11]: defaulting = 1, visible = 0, type = 5, value = 39.0617
    // input[12]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[14]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[15]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[16]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[17]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[18]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[19]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[20]: visible = 1
    // input[21]: visible = 1
    // input[29]: defaulting = 1, visible = 0, type = 3, value = 0
    // input[41]: defaulting = 0, visible = 0, type = 32, value = "none"
    // input[42]: defaulting = 0, visible = 0, type = 32, value = "Gridded_3D_1var_notseries"
    // page group: image
    // title: value = Gridded_3D_1var_notseries
    // depth: value = 8
    // window: position = (0.0000,0.0000), size = 0.9875x0.9550
    // internal caching: 1
    //
main_Image_5_out_1,
main_Image_5_out_2,
main_Image_5_out_3 = 
    Image(
    main_Image_5_in_1,
    main_Collect_2_out_1,
    main_Image_5_in_3,
    main_Image_5_in_4,
    main_Image_5_in_5,
    main_Image_5_in_6,
    main_Image_5_in_7,
    main_Image_5_in_8,
    main_Image_5_in_9,
    main_Image_5_in_10,
    main_Image_5_in_11,
    main_Image_5_in_12,
    main_Image_5_in_13,
    main_Image_5_in_14,
    main_Image_5_in_15,
    main_Image_5_in_16,
    main_Image_5_in_17,
    main_Image_5_in_18,
    main_Image_5_in_19,
    main_AutoCamera_1_out_1,
    main_Reset_4_out_1,
    main_Image_5_in_22,
    main_Image_5_in_23,
    main_Image_5_in_24,
    main_Image_5_in_25,
    main_Image_5_in_26,
    main_Image_5_in_27,
    main_Image_5_in_28,
    main_Image_5_in_29,
    main_Image_5_in_30,
    main_Image_5_in_31,
    main_Image_5_in_32,
    main_Image_5_in_33,
    main_Image_5_in_34,
    main_Image_5_in_35,
    main_Image_5_in_36,
    main_Image_5_in_37,
    main_Image_5_in_38,
    main_Image_5_in_39,
    main_Image_5_in_40,
    main_Image_5_in_41,
    main_Image_5_in_42,
    main_Image_5_in_43,
    main_Image_5_in_44,
    main_Image_5_in_45,
    main_Image_5_in_46,
    main_Image_5_in_47,
    main_Image_5_in_48,
    main_Image_5_in_49
    ) [instance: 5, cache: 1];
    // 
    // node MapToPlane[2]: x = 77, y = 265, inputs = 3, label = MapToPlane
    // input[3]: defaulting = 0, visible = 1, type = 8, value = NULL
    // page group: maptoplane
    //
main_MapToPlane_2_out_1 = 
    MapToPlane(
    main_Receiver_2_out_1,
    main_Compute_3_out_1,
    main_MapToPlane_2_in_3
    ) [instance: 2, cache: 1];
    // 
    // node MapToPlane[3]: x = 181, y = 265, inputs = 3, label = MapToPlane
    // input[3]: defaulting = 0, visible = 1, type = 8, value = [0 1 0]
    // page group: maptoplane
    //
main_MapToPlane_3_out_1 = 
    MapToPlane(
    main_Receiver_2_out_1,
    main_Compute_5_out_1,
    main_MapToPlane_3_in_3
    ) [instance: 3, cache: 1];
    // 
    // node Switch[1]: x = 148, y = 490, inputs = 3, label = Switch
    // page group: iso_or_glyph
    //
main_Switch_1_out_1 = 
    Switch(
    main_Compute_1_out_1,
    main_Color_5_out_1,
    main_AutoGlyph_5_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[2]: x = 131, y = 559, inputs = 1, label = isosurface_or_glyphs
    // page group: iso_or_glyph
    //
isosurface_or_glyphs = main_Switch_1_out_1;
    // 
    // node Receiver[3]: x = 34, y = 84, inputs = 1, label = isosurface_or_glyphs
    // page group: image
    //
main_Receiver_3_out_1[cache: 0] = isosurface_or_glyphs;
    //
    // decorator Annotate	pos=(79,21) size=509x76 style(Label), font=bold, value = <NULL>
    // annotation user_begin: 134
    // annotation user: This visual program is intended for use with three-dimensional, gridded
    // annotation user: data, with one variable.
    // annotation user: <NULL>
    // annotation user: On this page the data are imported.
    // annotation user_end: <NULL>
    // resource *decorator.alignment:XmALIGNMENT_BEGINNING
    // page group: import
    //
    // decorator Annotate	pos=(458,67) size=334x92 style(Label), font=bold, value = <NULL>
    // annotation user_begin: 172
    // annotation user: this page creates a "maptoplane" (two-d slice)
    // annotation user: of the data.  At the same time, the
    // annotation user: imported data is used to data-drive the
    // annotation user: colormap editor, which is used to color the
    // annotation user: data.
    // annotation user_end: <NULL>
    // resource *decorator.alignment:XmALIGNMENT_BEGINNING
    // page group: maptoplane
// network: end of macro body
CacheScene(main_Image_5_in_1, main_Image_5_out_1, main_Image_5_out_2);
}
main_Import_1_in_1 = "/home/mstorti/PETSC/petscfem/test/les/stabi3d/viewer_tmp.dx";
main_Import_1_in_2 = NULL;
main_Import_1_in_3 = NULL;
main_Import_1_in_4 = NULL;
main_Import_1_in_5 = NULL;
main_Import_1_in_6 = NULL;
main_Import_1_out_1 = NULL;
main_Transmitter_1_out_1 = NULL;
main_Receiver_2_out_1 = NULL;
main_Sequencer_1_in_1 = "Sequencer_1";
main_Sequencer_1_in_2 = NULL;
main_Sequencer_1_in_3 = NULL;
main_Sequencer_1_in_4 = NULL;
main_Sequencer_1_in_5 = NULL;
main_Sequencer_1_in_6 = NULL;
main_Sequencer_1_in_7 = { 1 100 1 1 100 1 };
main_Sequencer_1_out_1 = NULL;

@startframe = 1;
@nextframe  = @startframe;
@endframe   = 100;
@deltaframe = 1;
main_Compute_6_in_1 = "[(2.*float($0)/100),0.5,1]";
main_Compute_6_out_1 = NULL;
main_MapToPlane_4_in_3 = [1 0 0];
main_MapToPlane_4_out_1 = NULL;
main_Colormap_4_in_1 = { [0.0 0.666667] [1.0 0.0] };
main_Colormap_4_in_2 = { [0.0 1.0] [1.0 1.0] };
main_Colormap_4_in_3 = { [0.0 1.0] [1.0 1.0] };
main_Colormap_4_in_4 = { [0.0 1.0] [1.0 1.0] };
main_Colormap_4_in_5 = "Colormap_4";
main_Colormap_4_in_7 = NULL;
main_Colormap_4_in_8 = NULL;
main_Colormap_4_in_9 = NULL;
main_Colormap_4_in_10 = NULL;
main_Colormap_4_in_11 = NULL;
main_Colormap_4_in_12 = { 0.0 0.86211973 };
main_Colormap_4_in_13 = NULL;
main_Colormap_4_in_14 = NULL;
main_Colormap_4_in_15 = NULL;
main_Colormap_4_in_16 = NULL;
main_Colormap_4_in_17 = 0.0;
main_Colormap_4_in_18 = 0.86211973;
main_Colormap_4_in_19 = NULL;
main_Colormap_4_out_1 = NULL;
main_Color_4_in_3 = NULL;
main_Color_4_in_4 = NULL;
main_Color_4_in_5 = NULL;
main_Color_4_out_1 = NULL;
main_Transmitter_4_out_1 = NULL;
main_Receiver_5_out_1 = NULL;
main_Collect_2_in_1 = NULL;
main_Collect_2_out_1 = NULL;
main_AutoCamera_1_in_2 = "off-diagonal";
main_AutoCamera_1_in_3 = NULL;
main_AutoCamera_1_in_4 = NULL;
main_AutoCamera_1_in_5 = NULL;
main_AutoCamera_1_in_6 = NULL;
main_AutoCamera_1_in_7 = NULL;
main_AutoCamera_1_in_8 = NULL;
main_AutoCamera_1_in_9 = NULL;
main_AutoCamera_1_out_1 = NULL;
main_Receiver_1_out_1 = NULL;
main_Sample_1_in_2 = 400;
main_Sample_1_out_1 = NULL;
main_AutoGlyph_5_in_2 = NULL;
main_AutoGlyph_5_in_3 = NULL;
main_AutoGlyph_5_in_4 = NULL;
main_AutoGlyph_5_in_5 = NULL;
main_AutoGlyph_5_in_6 = NULL;
main_AutoGlyph_5_in_7 = NULL;
main_AutoGlyph_5_out_1 = NULL;
main_Transmitter_5_out_1 = NULL;
main_Receiver_6_out_1 = NULL;
main_Compute_4_in_1 = "float($0)/100.";
main_Compute_4_out_1 = NULL;
main_Isosurface_2_in_3 = NULL;
main_Isosurface_2_in_4 = NULL;
main_Isosurface_2_in_5 = NULL;
main_Isosurface_2_in_6 = NULL;
main_Isosurface_2_out_1 = NULL;
main_Color_5_in_2 = NULL;
main_Color_5_in_3 = .4;
main_Color_5_in_4 = NULL;
main_Color_5_in_5 = NULL;
main_Color_5_out_1 = NULL;
main_Inquire_2_in_2 = "is vector";
main_Inquire_2_in_3 = NULL;
main_Inquire_2_out_1 = NULL;
main_Inquire_3_in_2 = "is data dependent";
main_Inquire_3_in_3 = "connections";
main_Inquire_3_out_1 = NULL;
main_Compute_1_in_1 = "$0 || $1 ? 2 : 1";
main_Compute_1_out_1 = NULL;
main_Compute_3_in_1 = "[1.,0.5, (2.*float($0)/100)]";
main_Compute_3_out_1 = NULL;
main_Compute_5_in_1 = "[1., (float($0)/100),1]";
main_Compute_5_out_1 = NULL;
main_Reset_4_in_1 = "main_Reset_4_out_1";
main_Reset_4_in_2 = 0;
main_Reset_4_in_3 = 0;
main_Reset_4_in_4 = NULL;
main_Reset_4_in_5 = NULL;
main_Reset_4_in_6 = NULL;
main_Reset_4_out_1 = 0;
macro Image(
        id,
        object,
        where,
        useVector,
        to,
        from,
        width,
        resolution,
        aspect,
        up,
        viewAngle,
        perspective,
        options,
        buttonState = 1,
        buttonUpApprox = "none",
        buttonDownApprox = "none",
        buttonUpDensity = 1,
        buttonDownDensity = 1,
        renderMode = 0,
        defaultCamera,
        reset,
        backgroundColor,
        throttle,
        RECenable = 0,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable = 0,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels,
        webOptions) -> (
        object,
        camera,
        where)
{
    ImageMessage(
        id,
        backgroundColor,
        throttle,
        RECenable,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels,
        interactionMode,
        title,
        renderMode,
        buttonUpApprox,
        buttonDownApprox,
        buttonUpDensity,
        buttonDownDensity) [instance: 1, cache: 1];
    autoCamera =
        AutoCamera(
            object,
            "front",
            object,
            resolution,
            aspect,
            [0,1,0],
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    realCamera =
        Camera(
            to,
            from,
            width,
            resolution,
            aspect,
            up,
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    coloredDefaultCamera = 
	 UpdateCamera(defaultCamera,
            background=backgroundColor) [instance: 1, cache: 1];
    nullDefaultCamera =
        Inquire(defaultCamera,
            "is null + 1") [instance: 1, cache: 1];
    resetCamera =
        Switch(
            nullDefaultCamera,
            coloredDefaultCamera,
            autoCamera) [instance: 1, cache: 1];
    resetNull = 
        Inquire(
            reset,
            "is null + 1") [instance: 2, cache: 1];
    reset =
        Switch(
            resetNull,
            reset,
            0) [instance: 2, cache: 1];
    whichCamera =
        Compute(
            "($0 != 0 || $1 == 0) ? 1 : 2",
            reset,
            useVector) [instance: 1, cache: 1];
    camera = Switch(
            whichCamera,
            resetCamera,
            realCamera) [instance: 3, cache: 1];
    AAobject =
        AutoAxes(
            object,
            camera,
            AAlabels,
            AAticks,
            AAcorners,
            AAframe,
            AAadjust,
            AAcursor,
            AAgrid,
            AAcolors,
            AAannotation,
            AAlabelscale,
            AAfont,
            AAxTickLocs,
            AAyTickLocs,
            AAzTickLocs,
            AAxTickLabels,
            AAyTickLabels,
            AAzTickLabels) [instance: 1, cache: 1];
    switchAAenable = Compute("$0+1",
	     AAenable) [instance: 2, cache: 1];
    object = Switch(
	     switchAAenable,
	     object,
	     AAobject) [instance:4, cache: 1];
    SWapproximation_options =
        Switch(
            buttonState,
            buttonUpApprox,
            buttonDownApprox) [instance: 5, cache: 1];
    SWdensity_options =
        Switch(
            buttonState,
            buttonUpDensity,
            buttonDownDensity) [instance: 6, cache: 1];
    HWapproximation_options =
        Format(
            "%s,%s",
            buttonDownApprox,
            buttonUpApprox) [instance: 1, cache: 1];
    HWdensity_options =
        Format(
            "%d,%d",
            buttonDownDensity,
            buttonUpDensity) [instance: 2, cache: 1];
    switchRenderMode = Compute(
	     "$0+1",
	     renderMode) [instance: 3, cache: 1];
    approximation_options = Switch(
	     switchRenderMode,
            SWapproximation_options,
	     HWapproximation_options) [instance: 7, cache: 1];
    density_options = Switch(
	     switchRenderMode,
            SWdensity_options,
            HWdensity_options) [instance: 8, cache: 1];
    renderModeString = Switch(
            switchRenderMode,
            "software",
            "hardware")[instance: 9, cache: 1];
    object_tag = Inquire(
            object,
            "object tag")[instance: 3, cache: 1];
    annoted_object =
        Options(
            object,
            "send boxes",
            0,
            "cache",
            1,
            "object tag",
            object_tag,
            "ddcamera",
            whichCamera,
            "rendering approximation",
            approximation_options,
            "render every",
            density_options,
            "button state",
            buttonState,
            "rendering mode",
            renderModeString) [instance: 1, cache: 1];
    RECresNull =
        Inquire(
            RECresolution,
            "is null + 1") [instance: 4, cache: 1];
    ImageResolution =
        Inquire(
            camera,
            "camera resolution") [instance: 5, cache: 1];
    RECresolution =
        Switch(
            RECresNull,
            RECresolution,
            ImageResolution) [instance: 10, cache: 1];
    RECaspectNull =
        Inquire(
            RECaspect,
            "is null + 1") [instance: 6, cache: 1];
    ImageAspect =
        Inquire(
            camera,
            "camera aspect") [instance: 7, cache: 1];
    RECaspect =
        Switch(
            RECaspectNull,
            RECaspect,
            ImageAspect) [instance: 11, cache: 1];
    switchRECenable = Compute(
          "$0 == 0 ? 1 : (($2 == $3) && ($4 == $5)) ? ($1 == 1 ? 2 : 3) : 4",
            RECenable,
            switchRenderMode,
            RECresolution,
            ImageResolution,
            RECaspect,
	     ImageAspect) [instance: 4, cache: 1];
    NoRECobject, RECNoRerenderObject, RECNoRerHW, RECRerenderObject = Route(switchRECenable, annoted_object);
    Display(
        NoRECobject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    image =
        Render(
            RECNoRerenderObject,
            camera) [instance: 1, cache: 1];
    Display(
        image,
        NULL,
        where,
        throttle) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    rec_where = Display(
        RECNoRerHW,
        camera,
        where,
        throttle) [instance: 1, cache: 0];
    rec_image = ReadImageWindow(
        rec_where) [instance: 1, cache: 1];
    WriteImage(
        rec_image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    RECupdateCamera =
	UpdateCamera(
	    camera,
	    resolution=RECresolution,
	    aspect=RECaspect) [instance: 2, cache: 1];
    Display(
        RECRerenderObject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    RECRerenderObject =
	ScaleScreen(
	    RECRerenderObject,
	    NULL,
	    RECresolution,
	    camera) [instance: 1, cache: 1];
    image =
        Render(
            RECRerenderObject,
            RECupdateCamera) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 2, cache: 1];
}
main_Image_5_in_1 = "Image_5";
main_Image_5_in_3 = "X8,,Gridded_3D_1var_notseries";
main_Image_5_in_4 = 1;
main_Image_5_in_5 = [0.355465 0.494851 1.0035];
main_Image_5_in_6 = [3.20957 0.494851 1.0035];
main_Image_5_in_7 = 2.02484;
main_Image_5_in_8 = 776;
main_Image_5_in_9 = 0.682;
main_Image_5_in_10 = [0 1 0];
main_Image_5_in_11 = NULL;
main_Image_5_in_12 = 0;
main_Image_5_in_13 = NULL;
main_Image_5_in_14 = 1;
main_Image_5_in_15 = NULL;
main_Image_5_in_16 = NULL;
main_Image_5_in_17 = NULL;
main_Image_5_in_18 = NULL;
main_Image_5_in_19 = 0;
main_Image_5_in_22 = NULL;
main_Image_5_in_23 = NULL;
main_Image_5_in_25 = NULL;
main_Image_5_in_26 = NULL;
main_Image_5_in_27 = NULL;
main_Image_5_in_28 = NULL;
main_Image_5_in_29 = NULL;
main_Image_5_in_30 = NULL;
main_Image_5_in_31 = NULL;
main_Image_5_in_32 = NULL;
main_Image_5_in_33 = NULL;
main_Image_5_in_34 = NULL;
main_Image_5_in_35 = NULL;
main_Image_5_in_36 = NULL;
main_Image_5_in_37 = NULL;
main_Image_5_in_38 = NULL;
main_Image_5_in_39 = NULL;
main_Image_5_in_40 = NULL;
main_Image_5_in_41 = "none";
main_Image_5_in_42 = "Gridded_3D_1var_notseries";
main_Image_5_in_43 = NULL;
main_Image_5_in_44 = NULL;
main_Image_5_in_45 = NULL;
main_Image_5_in_46 = NULL;
main_Image_5_in_47 = NULL;
main_Image_5_in_48 = NULL;
main_Image_5_in_49 = NULL;
main_MapToPlane_2_in_3 = NULL;
main_MapToPlane_3_in_3 = [0 1 0];
main_Switch_1_out_1 = NULL;
main_Transmitter_2_out_1 = NULL;
Executive("product version 4 2 0");
$sync

sequence main();
play;
