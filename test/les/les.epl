# -*- mode: shell-script -*-
#
<:require '../eperlini.pl':>// # Initializes ePerl 
# ---- <>  ---- <>  ---- <>  ---- <>  ---- <>  ---- <>  ---- <>
#<: $LES=1; :> USE LES: <:=$LES:>
<: 
#__TRANSCRIPT__
$L=1;				# Plate separation
$Re_laminar=100;		# Reynolds number
$u_max=1;			# Average velocity
$Co=1;				# Courant number to compute Dt

$nz=5;				# Number of elements in z
$nx=10;				# Number of elements in x

$u_av = (2/3)*$u_max;		# Average velocity
$nu=$u_av * $L / $Re_laminar;	# Kinematic viscosity 
$dpdx=8*$nu*$u_max/$L**2;	# Longitudinal pressure gradient 

$hz = $L/2/$nz;			# aver. mesh size in z direction
$hx = $L/2/$nx;			# mesh size in x direction
$Dt = $Co*$hx/$u_max;		# Time step based on Courant
$du_pert = 0.3;			# fraction of pert in the velocity field
#__END_TRANSCRIPT__
@vars = qw(L nz nx hz hx du_pert);
transcript("", @vars);	# print variables on output and transcript this block
octave_export_vars(">data.m.tmp",@vars);
:>//

global_options

nsave 100
save_file_pattern les.state.%d.tmp
nsaverot 50
nfile 2
nrec 20
save_file les.state.tmp
nstep 10000
#report_consumed_time 1
chunk_size 2000
proc_weights weights.dat
temporal_stability_factor 1 # for compatibility with older versions
pc_lu_fill 8

Dt <:=$Dt:>
alpha 1.
LES <:=$LES:>
#if $LES
C_smag 0.18
#else
C_smag 0.
#endif
G_body <:=$dpdx:> 0. 0.
initial_state "les.inirand.tmp"
verify_jacobian_with_numerical_one 0
# print_linear_system_and_stop
# activate_debug

#    Iterative parameters
#update_jacobian_iters 1
solver "petsc"
preco_type "jacobi"
Krylov_dim 200
maxits 200
tol_newton 1e-5
nnwt 3

#tau_fac 1.
shock_capturing_factor 0
print_internal_loop_conv 
# Datos fisicos
#
viscosity <:=$nu:>
weak_form 0
y_wall_plus 25.

hook_list ns_dx_hook my_dx_hook

dx_split_state "1 3 0 1 2 u 1 1 3 p"
dx_auto_combine
dx_state_all_fields 0
dx_steps 1
# dx_read_state_from_file 0

A_van_Driest 26.
__END_HASH__

#================================================================
# ndim nu ndof
nodes  3  3  4
__INCLUDE__ les.nod.tmp
_END_NODES__

#================================================================
elemset nsi_tet_les_fm2 8
props 
dx 1
name malla
additional_iprops 1
#if 0
local_store
cache_grad_div_u 1
#endif
geometry cartesian3d
ndim 3
npg 8
__END_HASH__
__INCLUDE__ les.con.tmp
__END_ELEMSET__

#================================================================
#if 1
elemset wall 4
props 
additional_props 1
name malla
geometry cartesian2d
ndim 3
npg 4
__END_HASH__
__INCLUDE__ les.wall.tmp
__END_ELEMSET__
#endif

#================================================================
fixa
#__INCLUDE__ les.fixa.tmp
#if !$LES   
## Cuando no se usa LES hay
## que fijar la pared
__INCLUDE__ les.fixaw.tmp
#else
## Cuando se usa LES la pared se deja libre
#endif
# Fix pressure at some node 
<:=int(1.5*$nx)*($nx+1)+int($nx/2)+1;:> 4 0.
__END_FIXA__

#================================================================
constraint
__INCLUDE__ les.peri.tmp
__END_CONSTRAINT__

