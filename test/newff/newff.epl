<:                              # starts ePerl block
#__TRANSCRIPT__
require '../eperlini.pl';       # Initializes ePerl 
@read_var = readm_all_v("data.m");# read all variables in octave file
octave_string(qw(dif_type adv_type reac_type source_type));
$case=newff;
#__END_TRANSCRIPT__
:>//                            # ends ePerl block

#default definitions
#===========================================================
global_options
ndim 2

chunk_size 4
save_file "save.state.tmp"
nsave 20

rtol 1e-2
maxits 100

save_file_pattern "outvector%d.sal"
nsaverot 1000000

nstep <:=$nstep:>
nnwt <:=$nnwt:>
tol_newton 0
preco_type "lu"

local_time_step 0
consistent_supg_matrix 1
auto_time_step 0

Dt <:=$Dt:>
alpha 1.
#tau_fac 0.

#solve_system 0
#print_linear_system_and_stop

weak_form 0

#---<*>---//---<*>---//---<*>---//---<*>---//---<*>---//
#---<*>---//-- ADVECTIVE JACOBIANS --<*>---//---<*>---//
#---<*>---//---<*>---//---<*>---//---<*>---//---<*>---// 
advective_jacobians_type "<:=$adv_type:>"
#if $adv_type eq 'null'
# no line here
#elsif $adv_type eq 'global_vector'
advective_jacobians <:=$u:> 0.
#else
<:die "not known adv_type: $adv_type\n":>
#endif

#---<*>---//---<*>---//---<*>---//---<*>---//---<*>---//
#---<*>---// DIFFUSIVE JACOBIANS  ---<*>---//---<*>---//
#---<*>---//---<*>---//---<*>---//---<*>---//---<*>---// 
diffusive_jacobians_type "<:=$dif_type:>"
#if $dif_type eq 'global_scalar'
diffusive_jacobians <:=$D:>
#elsif $dif_type eq 'scalar_per_field'
diffusive_jacobians <:=$D:> <:=$D*2:> <:=$D*3:>
#elsif $dif_type eq 'global_tensor'
diffusive_jacobians <:=$D:> 0 0  <:=$D:>
#elsif $dif_type eq 'per_field_tensor'
diffusive_jacobians <:=$D:> 0 0  <:=$D:> \
                    <:=$D:> 0 0  <:=$D:> \
                    <:=$D:> 0 0  <:=$D:>
#elsif $dif_type eq 'full'
diffusive_jacobians \
                    <:=$D:> 0 0  <:=$D:> \
                    0 0 0 0 \
                    0 0 0 0 \
                    0 0 0 0 \
                    <:=$D:> 0 0  <:=$D:> \
                    0 0 0 0 \
                    0 0 0 0 \
                    0 0 0 0 \
                    <:=$D:> 0 0  <:=$D:>
#else
<:die "not known dif_type: $dif_type\n":>
#endif

#---<*>---//---<*>---//---<*>---//---<*>---//---<*>---//
#---<*>---// REACTIVE JACOBIANS  /---<*>---//---<*>---//
#---<*>---//---<*>---//---<*>---//---<*>---//---<*>---// 
reactive_jacobians_type "<:=$reac_type:>"

#if $reac_type eq 'full'
reactive_jacobians <:=$R:>  0. 0. 0. <:=$R:>  0. 0. 0. <:=$R:>
#reactive_jacobians <:=$R:>  0. 0. 0. <:=3*$R:>  0. 0. 0. <:=10*$R:>
#elsif $reac_type eq 'global_scalar'
reactive_jacobians <:=$R:>
#elsif $reac_type eq 'scalar_per_field'
reactive_jacobians <:=$R:> <:=3*$R:> <:=10*$R:>
#elsif $reac_type eq 'null'
# no line for null reactive jacobian
#else
<:die "not known reac_type: $reac_type\n":>
#endif

#---<*>---//---<*>---//---<*>---//---<*>---//---<*>---// 
#---<*>--      SOURCE TERM     -//---<*>---//---<*>---// 
#---<*>---//---<*>---//---<*>---//---<*>---//---<*>---// 
source_term_type "<:=$source_type:>"

#if $source_type eq 'null'
# no line here
#elsif $source_type eq 'global_scalar'
source_term <:=$s:>
#elsif $source_type eq 'full'
source_term <:=$s:> <:=2*$s:> <:=3*$s:>
#else
<:die "not known source_type: $source_type\n":>
#endif

__END_HASH__

#===========================================================
# ndim nu ndof
nodes   2  2  3
__INCLUDE__ <:=$case:>.nod.tmp
__END_NODES__

#===========================================================
elemset newadvdif_advecfm2 4
props source_term
#Datos del elemento
geometry cartesian2d
npg 4
__END_HASH__
__INCLUDE__ <:=$case:>.con.tmp
__END_ELEMSET__

end_elemsets

#===========================================================
# condicion variable en el tiempo
#
#  fixa
#  __INCLUDE__ sine_new.fixa.tmp
#  __END_FIXA__

#---<*>---//---<*>---//---<*>---//---<*>---//---<*>---// 
constraint
__INCLUDE__ newff.peri.tmp
__END_CONSTRAINT__

# Local Variables: $
# mode: shell-script $
# eval: (setq indent-tabs-mode nil) $
# End: $
