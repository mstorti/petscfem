# -*- mode: shell-script -*-
# case: <:=$ENV{'case'}:>
<:                              # starts ePerl block
#__TRANSCRIPT__
require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";# Initializes ePerl 
get_var_env('case',undef);
get_var_env('meas_perf',undef);
$save_file = ($case ? "bubbly.$case.tmp" : "bubbly.state.tmp");
## Test the 'G_body' feature. 
$g_body= 1;
if ($case eq 'g_body') {
    $case='lu';
    $g_body=1;
}
$U = 1;				# typical velocity scale
$L = 1;				# Side of the cavity
$N = 20;
$hratio = 5;			# refinement (h_center/h_wall)
$Re = 1;			# Reynolds number
$visco_l = $L/$Re;		# viscosity
$Dt = 0.01;			# time step
$solver = "petsc";
$preco_type = "lu";
$maxits = 1;
$nstep = 1;
$alpha_l = 1.0;
$u_g=0;
$v_g=0;
$k = 0.1;
$eps = 0.1;
#
$weak_form = 0;
$cache_gdu = 0;
$update_jacobian =0;
# `scalar' avoids returning the first match, which can be zero
# and then can be interpreted as `false' 
$solver = "petsc";
$preco_type = "lu";
$maxits = 1;
#
#__END_TRANSCRIPT__
@vars = qw(U L N Re visco_l h Co Dt hratio 
		g_body alpha_l u_g v_g k eps);
transcript("", @vars);	# print variables on output
octave_export_vars(">data.m.tmp",@vars);
:>//                            # ends ePerl block

global_options

alpha 1.
nsave 5
<:pr('nstep'):> 
# initial_state bubbly.state
<:pr('save_file'):> 

# type of solver (may be "iisd", "petsc"...)
<:pr('solver'):>
<:pr('preco_type'):> 
<:pr('maxits'):> 
# Number of subdomains
<:pr('iisd_subpart'):>
#if $update_jacobian
# update_jacobian_iters 3
update_jacobian_start_steps 3
update_jacobian_steps 3
report_consumed_time
activate_debug_print
#endif

# file containing the weight (speed) of processors
proc_weights weights.dat

#    Iterative parameters
tol_tet 1e-5
tol_newton 1e-10
atol 0
rtol 1e-6
dtol 1e3
nnwt 4

Krylov_dim <:=$maxits:>
print_internal_loop_conv
# print_linear_system_and_stop
# solve_system 0
# verify_jacobian_with_numerical_one 1

# print_nodal_partitioning 1
Dt <:=$Dt:>
steady
temporal_stability_factor 0

shock_capturing_factor 0
#if $cache_gdu
local_store
cache_grad_div_u
#endif

#if $g_body
G_body 0 -1.
#endif
__END_HASH__

# ndim nu ndof
nodes  2  2  8
__INCLUDE__ bubbly.nod.tmp
_END_NODES__

elemset bubbly 4 

name malla

# report_consumed_time
geometry cartesian2d
ndim 2
npg 4
#
# Datos fisicos
#
<:pr('visco_l'):> 
visco_g <:=$visco_l/1000;:>
<:pr('weak_form'):>
rho_l 1.
rho_g 0.001
__END_HASH__
__INCLUDE__ bubbly.con.tmp
__END_ELEMSET__

end_elemsets

fixa
# fijacion en la presion
1 2 0.
# fijaciones de velocidad en las paredes
__INCLUDE__ bubbly.fixa.tmp

__INCLUDE__ bubbly.fixa_all.tmp
__END_FIXA__
