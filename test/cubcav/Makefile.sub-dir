# -*- mode: Makefile -*-
# $Id: Makefile.sub-dir,v 1.1 2003/10/24 22:51:19 mstorti Exp $ 

.PHONY: all run  compile lclean laplace adv nso laplace_tests force \
        ctest gprof

default: 
	$(MAKE) CASE=cubcav run

test_isp: 

#default case
# case := laplace
# case := iisd_sbp1_uj
export case

tests: test_re1000 test_iisd

PETSCFEM_DIR = ../../..
# PETSCFEM_DIR = $(HOME)/PETSC/petscfem-stable
include $(PETSCFEM_DIR)/Makefile.base
include $(PETSCFEM_DIR)/test/Makefile.base.test

LOC_PROG := ns
#CASE_NAME := qharm
CASE_NAME := cubcav
PROG := $(NS_O)

CASE := $(CASE_NAME)
################################################################
ifeq (1,1)
# NP = $(shell procsel -n $(PETSCFEM_PROCTABLE))
NP := $(shell procsel -n ./proctable)
NL := -nolocal
MCH := -machinefile ./machi.dat
endif

ifeq (1,0)
NP := 1
MCH :=
endif

ifneq ($(HOSTNAME),node1.beowulf.gtm)
NP := $(shell procsel ./proctable.mono)
NL :=
MCH := -machinefile ./machi.dat
NP := 1
endif

export NP

#w Makes only the mesh
mesh:
	$(MAKE) -C ../../../tools hexasplit.bin
	make-depl cubcav.epl cubcav.depl -d case=ns

#w Runs program, use `mkmesh=0' or 1 to control mesh creation
run: 
	$(MAKE) mesh
	-${MPIRUN} $(NL) -np $(NP) $(MCH) $(PROG) -case $(CASE).depl

local_sw::
	chmod 755 mkmpeg*.sh

local_clean::
	-chmod +w *.depl
	-rm *.depl *.sal tmp_file*.tmp &> /dev/null

hexasplit.bin: hexasplit.o
	${CXX_CLINKER} -o $@ $<  $(LDFLAGS_NO_PROG_LIB)

nettest = $(PETSCFEM_DIR)/tools/nettest.bin

.PHONY: nettest
nettest:
	NP=`procsel -n ./proctable.geronimo` ;  \
	$(MPIRUN) -np $$NP -machinefile machi.dat $(nettest)

dxo:
	$(EPERL) -P viewer.dx > viewer.dx.tmp

dx:
	$(EPERL) -P -d dx=1 cubcav.epl > cubcav_dx.depl
	${MPIRUN} -np 1 $(PROG) -case cubcav_dx.depl

#================================================================
#w 
dx_make_command: dx_make_command2

dx_make_command1:
	octave -qH comp_step.m

dx_make_command2:
#	echo $$dx_step >> comp_server.fifo 
	if [ -f cubcav.tiff ] ; then rm cubcav.tiff ; fi ;	\
	sendstep.pl $$dx_step					\
		comp_server.fifo comp_server2.fifo

#================================================================
yuv_compress:
	yuv=YUV/$(CASE_NAME).$$dx_step.yuv ;			\
	tiff=$(CASE_NAME).tiff ;				\
	if [ -f $$tiff ] ;					\
		then if [ -f $$yuv ] ; then rm -f $$yuv ; fi ;	\
		convert $$tiff $$yuv ; gzip -f $$yuv ;		\
	fi

#================================================================
k:
	-killall ns_O.bin job.pl

#================================================================
#w For the shell-hook
cubcav_init:
#	perl $(HOME)/ROCKET/ALE/mkstepsdir.pl

cubcav_pre:
cubcav_post:
#	for f in `find STEPS -name '$(CASE_NAME).state_*.tmp'` ; \
#		do echo "gzipping $$f" ; gzip -f $$f ; done

cubcav_close:
#w
fifo:
	fifo="comp_server.fifo" ;			\
	if [ -e $$fifo ] ; then rm $$fifo ; fi ;	\
	mkfifo $$fifo
	fifo="comp_server2.fifo" ;			\
	if [ -e $$fifo ] ; then rm $$fifo ; fi ;	\
	mkfifo $$fifo

clean_fifo:
	fifo="comp_server.fifo" ;			\
	if [ -e $$fifo ] ; then rm $$fifo ; fi ;	\
	fifo="comp_server2.fifo" ;			\
	if [ -e $$fifo ] ; then rm $$fifo ; fi ;	\

#w 
step_server:
	octave -qH comp_step2.m
