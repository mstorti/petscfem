# -*- mode: shell-script -*-
# case: <:=$ENV{'case'}:>
<:                              # starts ePerl block
#__TRANSCRIPT__
require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";# Initializes ePerl 
get_var_env('weak_form',0);
get_var_env('case',undef);
$case =~ s/^\s*(.*)\s*$/$1/;
$ndim = 3;			# Number of spatial dimensions
$U = 1;				# typical velocity scale
$L = 1;				# Side of the cavity
$N = 20;			# Number of elements per dimension
$hratio = 5;			# refinement (h_center/h_wall)
$Re = 1000;			# Reynolds number
$viscosity = $L/$Re;		# viscosity
$Dt = 0.01;			# time step
$solver = "petsc";
$preco_type = "lu";
$maxits = 1;
$nstep = 100;
$save_file = ($case ? "cubcav.$case.tmp" : "cubcav.state.tmp");
#
$weak_form = 0;
$cache_gdu = 0;
$update_jacobian =0;
$leaky=0;
$tol = $L/$N*1e-3;
# `scalar' avoids returning the first match, which can be zero
# and then can be interpreted as `false' 
if (scalar $case =~ /weak_form_(\d)/) {
    $weak_form = $1;
} elsif ($case eq 'lu') {
    $solver = "petsc";
    $preco_type = "lu";
    $maxits = 1;
    $nstep = 2;
} elsif ($case =~ /^iisd/) {
    $solver = "iisd";
    $iisd_subpart = 2;
    $maxits = 200;
    $nstep = 1;
    $iisd_subpart = $1 if $case=~/_sbp(\d*)/;
    if ($case=~/_uj/) {
	$update_jacobian = 1;
	$nstep = 2000;
	$maxits=100;
	$iisd_subpart = 10;
    }
    $preco_type = "jacobi";
} elsif ($case eq 'big') {
    $N = 40;
#      $solver = "iisd";
#      $preco_type = "jacobi";
    $solver = "petsc";
    $preco_type = "lu";
    $maxits = 1;
    $nstep = 20;
    $cache_gdu = 0;
    $iisd_subpart = 10;
} else {
    die "don't know case \"$case\"\n";
}
#
#__END_TRANSCRIPT__
transcript("", qw(viscosity Dt));	# print variables on output
octave_export_vars(">data.m.tmp",qw(U L N Re viscosity h Co Dt hratio leaky tol));
:>//                            # ends ePerl block

global_options

<:pr('ndim'):>
nsave 5
<:pr('nstep'):> 
# initial_state cubcav.state
<:pr('save_file'):> 

# type of solver (may be "iisd", "petsc"...)
<:pr('solver'):>
<:pr('preco_type'):> 
<:pr('maxits'):> 
# Number of subdomains
<:pr('iisd_subpart'):>
#if $update_jacobian
# update_jacobian_iters 3
update_jacobian_start_steps 3
update_jacobian_steps 3
report_consumed_time
activate_debug_print
#endif

# file containing the weight (speed) of processors
proc_weights weights.dat

#    Iterative parameters
tol_tet 1e-5
tol_newton 1e-10
atol 0
rtol 1e-6
dtol 1e3
nnwt 1

Krylov_dim <:=$maxits:>
print_internal_loop_conv 1
#print_linear_system_and_stop 1
#verify_jacobian_with_numerical_one 1

#print_nodal_partitioning 1
Dt <:=$Dt:>
steady
temporal_stability_factor 0

shock_capturing_factor 0
#if $cache_gdu
local_store
cache_grad_div_u
#endif

__END_HASH__

# ndim nu ndof
nodes  3  3  4
__INCLUDE__ cubcav.nod.tmp
_END_NODES__

elemset nsi_tet_les_fm2 8
name malla
# report_consumed_time
geometry cartesian3d
npg 8
#
# Datos fisicos
#
<:pr('viscosity'):> 
<:pr('weak_form'):>
LES 0
__END_HASH__
__INCLUDE__ cubcav.con.tmp
__END_ELEMSET__

end_elemsets

fixa
# fijacion en la presion
1 <:=ndim+1> 0.
# fijaciones de velocidad en las paredes
__INCLUDE__ cubcav.fixa.tmp
__END_FIXA__
