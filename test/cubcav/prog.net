//
// time: Tue Jan 14 18:36:58 2003
//
// version: 3.1.2 (format), 4.2.0 (DX)
//
//
// MODULE main
//
// comment: A general purpose visual program for gridded, two-dimensional, multivariate data has been used. 
// comment: 
// comment: The control panels allow you to choose which variable to visualize as a deformed surface, which variable to visualize as colors on the surface, and which variable to visualize as contour lines (for scalar data) or glyphs (for vector or connection-dependent data). You can also set the contour line values.
// comment: 
// comment: If you would like to modify or use this visual program in the future, choose Open Visual Program Editor from the Windows menu, and then choose Save As from the File menu of the VPE.
// page assignment: image	order=4, windowed=0, showing=0
// page assignment: import	order=2, windowed=0, showing=1
// workspace: width = 522, height = 598
// layout: snap = 0, width = 50, height = 50, align = NN
//
macro main(
) -> (
) {
    // 
    // node Import[1]: x = 199, y = 58, inputs = 6, label = Import
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "viewer.dx.tmp"
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "dx"
    // page group: import
    //
main_Import_1_out_1 = 
    Import(
    main_Import_1_in_1,
    main_Import_1_in_2,
    main_Import_1_in_3,
    main_Import_1_in_4,
    main_Import_1_in_5,
    main_Import_1_in_6
    ) [instance: 1, cache: 1];
    // 
    // node Compute[11]: x = 342, y = 130, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "mag($0)"
    // page group: import
    // expression: value = mag(u)
    // name[2]: value = u
    //
main_Compute_11_out_1 = 
    Compute(
    main_Compute_11_in_1,
    main_Import_1_out_1
    ) [instance: 11, cache: 1];
    // 
    // node Switch[6]: x = 362, y = 223, inputs = 2, label = Switch
    // input[1]: defaulting = 0, visible = 1, type = 1, value = 1
    // page group: import
    //
main_Switch_6_out_1 = 
    Switch(
    main_Switch_6_in_1,
    main_Compute_11_out_1
    ) [instance: 6, cache: 1];
    // 
    // node Colormap[3]: x = 448, y = 312, inputs = 19, label = Colormap
    // input[1]: defaulting = 0, visible = 0, type = 16777224, value = { [0.0 0.666667] [1.0 0.0] }
    // input[2]: defaulting = 0, visible = 0, type = 16777224, value = { [0.0 1.0] [1.0 1.0] }
    // input[3]: defaulting = 0, visible = 0, type = 16777224, value = { [0.0 1.0] [1.0 1.0] }
    // input[4]: defaulting = 0, visible = 0, type = 16777224, value = { [0.0 1.0] [1.0 1.0] }
    // input[5]: defaulting = 0, visible = 0, type = 32, value = "Colormap_3"
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 0.0
    // input[8]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 20
    // input[12]: defaulting = 0, visible = 0, type = 16777221, value = { 0.0 1.0 }
    // input[17]: defaulting = 0, visible = 0, type = 5, value = 0.0
    // input[18]: defaulting = 0, visible = 0, type = 5, value = 1.0
    // page group: import
    // window: position = (40.9588,54.6117), size = 40.9588x54.6117
    //
main_Colormap_3_out_1[cache: 2],
main_Colormap_3_out_2[cache: 2] = 
    Colormap(
    main_Colormap_3_in_1,
    main_Colormap_3_in_2,
    main_Colormap_3_in_3,
    main_Colormap_3_in_4,
    main_Colormap_3_in_5,
    main_Switch_6_out_1,
    main_Colormap_3_in_7,
    main_Colormap_3_in_8,
    main_Colormap_3_in_9,
    main_Colormap_3_in_10,
    main_Colormap_3_in_11,
    main_Colormap_3_in_12,
    main_Colormap_3_in_13,
    main_Colormap_3_in_14,
    main_Colormap_3_in_15,
    main_Colormap_3_in_16,
    main_Colormap_3_in_17,
    main_Colormap_3_in_18,
    main_Colormap_3_in_19
    ) [instance: 3, cache: 1];
    // 
    // node Color[2]: x = 312, y = 368, inputs = 5, label = Color
    // input[3]: defaulting = 0, visible = 1, type = 5, value = 1.0
    // page group: import
    //
main_Color_2_out_1 = 
    Color(
    main_Switch_6_out_1,
    main_Colormap_3_out_1,
    main_Color_2_in_3,
    main_Color_2_in_4,
    main_Color_2_in_5
    ) [instance: 2, cache: 1];
    // 
    // node MapToPlane[1]: x = 373, y = 453, inputs = 3, label = MapToPlane
    // input[2]: defaulting = 0, visible = 1, type = 8, value = [0 0 0.5]
    // page group: import
    //
main_MapToPlane_1_out_1 = 
    MapToPlane(
    main_Color_2_out_1,
    main_MapToPlane_1_in_2,
    main_MapToPlane_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[11]: x = 398, y = 536, inputs = 1, label = plane
    // page group: import
    //
plane = main_MapToPlane_1_out_1;
    // 
    // node Receiver[15]: x = 89, y = 173, inputs = 1, label = plane
    // page group: image
    //
main_Receiver_15_out_1[cache: 0] = plane;
    // 
    // node Collect[1]: x = 58, y = 286, inputs = 3, label = Collect
    // page group: image
    //
main_Collect_1_out_1 = 
    Collect(
    main_Receiver_15_out_1,
    main_Collect_1_in_2,
    main_Collect_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[8]: x = 271, y = 135, inputs = 1, label = u
    // page group: import
    //
u = main_Import_1_out_1;
    // 
    // node Receiver[14]: x = 291, y = 11, inputs = 1, label = u
    // page group: image
    //
main_Receiver_14_out_1[cache: 0] = u;
    // 
    // node Compute[9]: x = 282, y = 93, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[$0.x-1,$0.y]"
    // page group: image
    // expression: value = [u.x-1,u.y]
    // name[2]: value = u
    //
main_Compute_9_out_1 = 
    Compute(
    main_Compute_9_in_1,
    main_Receiver_14_out_1
    ) [instance: 9, cache: 1];
    // 
    // node DivCurl[1]: x = 164, y = 131, inputs = 2, label = DivCurl
    // page group: import
    //
main_DivCurl_1_out_1,
main_DivCurl_1_out_2 = 
    DivCurl(
    main_Import_1_out_1,
    main_DivCurl_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Compute[10]: x = 155, y = 227, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "log(mag($0)+0.1)"
    // page group: import
    // expression: value = log(mag(u)+0.1)
    // name[2]: value = u
    //
main_Compute_10_out_1 = 
    Compute(
    main_Compute_10_in_1,
    main_DivCurl_1_out_2
    ) [instance: 10, cache: 1];
    // 
    // node Grid[1]: x = 388, y = 25, inputs = 4, label = Grid
    // input[1]: defaulting = 0, visible = 1, type = 8, value = [3 0]
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "rectangle"
    // input[3]: defaulting = 0, visible = 1, type = 16777224, value = {[4 0.] [0 1.5]}
    // input[4]: defaulting = 0, visible = 1, type = 16777217, value = {21 7}
    // page group: image
    //
main_Grid_1_out_1 = 
    Grid(
    main_Grid_1_in_1,
    main_Grid_1_in_2,
    main_Grid_1_in_3,
    main_Grid_1_in_4
    ) [instance: 1, cache: 1];
    // 
    // node Image[5]: x = 51, y = 374, inputs = 49, label = Image
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Image_5"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[5]: defaulting = 0, visible = 0, type = 8, value = [0.5 0.5 0.5]
    // input[6]: defaulting = 0, visible = 0, type = 8, value = [3.9059 1.63679 2.96002]
    // input[7]: defaulting = 0, visible = 0, type = 5, value = 2.33249
    // input[8]: defaulting = 0, visible = 0, type = 1, value = 776
    // input[9]: defaulting = 0, visible = 0, type = 5, value = 0.682
    // input[10]: defaulting = 0, visible = 0, type = 8, value = [-0.212943 0.965288 -0.151245]
    // input[11]: defaulting = 1, visible = 0, type = 5, value = 30.0
    // input[12]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[14]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[15]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[16]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[17]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[18]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[19]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[29]: defaulting = 1, visible = 0, type = 3, value = 0
    // input[41]: defaulting = 0, visible = 0, type = 32, value = "rotate"
    // page group: image
    // depth: value = 16
    // window: position = (0.0000,0.0000), size = 0.9875x0.9550
    // internal caching: 1
    //
main_Image_5_out_1,
main_Image_5_out_2,
main_Image_5_out_3 = 
    Image(
    main_Image_5_in_1,
    main_Collect_1_out_1,
    main_Image_5_in_3,
    main_Image_5_in_4,
    main_Image_5_in_5,
    main_Image_5_in_6,
    main_Image_5_in_7,
    main_Image_5_in_8,
    main_Image_5_in_9,
    main_Image_5_in_10,
    main_Image_5_in_11,
    main_Image_5_in_12,
    main_Image_5_in_13,
    main_Image_5_in_14,
    main_Image_5_in_15,
    main_Image_5_in_16,
    main_Image_5_in_17,
    main_Image_5_in_18,
    main_Image_5_in_19,
    main_Image_5_in_20,
    main_Image_5_in_21,
    main_Image_5_in_22,
    main_Image_5_in_23,
    main_Image_5_in_24,
    main_Image_5_in_25,
    main_Image_5_in_26,
    main_Image_5_in_27,
    main_Image_5_in_28,
    main_Image_5_in_29,
    main_Image_5_in_30,
    main_Image_5_in_31,
    main_Image_5_in_32,
    main_Image_5_in_33,
    main_Image_5_in_34,
    main_Image_5_in_35,
    main_Image_5_in_36,
    main_Image_5_in_37,
    main_Image_5_in_38,
    main_Image_5_in_39,
    main_Image_5_in_40,
    main_Image_5_in_41,
    main_Image_5_in_42,
    main_Image_5_in_43,
    main_Image_5_in_44,
    main_Image_5_in_45,
    main_Image_5_in_46,
    main_Image_5_in_47,
    main_Image_5_in_48,
    main_Image_5_in_49
    ) [instance: 5, cache: 1];
    // 
    // node Streamline[1]: x = 400, y = 159, inputs = 7, label = Streamline
    // input[2]: defaulting = 1, visible = 1, type = 16777224, value = {[2 0]}
    // page group: image
    //
main_Streamline_1_out_1 = 
    Streamline(
    main_Compute_9_out_1,
    main_Grid_1_out_1,
    main_Streamline_1_in_3,
    main_Streamline_1_in_4,
    main_Streamline_1_in_5,
    main_Streamline_1_in_6,
    main_Streamline_1_in_7
    ) [instance: 1, cache: 1];
    // 
    // node Translate[1]: x = 278, y = 210, inputs = 2, label = Translate
    // input[2]: defaulting = 0, visible = 1, type = 8, value = [0 0 1]
    // page group: image
    //
main_Translate_1_out_1 = 
    Translate(
    main_Streamline_1_out_1,
    main_Translate_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[9]: x = 245, y = 227, inputs = 1, label = w
    // page group: import
    //
w = main_DivCurl_1_out_2;
    // 
    // node Transmitter[10]: x = 151, y = 347, inputs = 1, label = abs_w
    // page group: import
    //
abs_w = main_Compute_10_out_1;
    // 
    // node Tube[1]: x = 190, y = 249, inputs = 4, label = Tube
    // input[2]: defaulting = 0, visible = 1, type = 5, value = 0.03
    // page group: image
    //
main_Tube_1_out_1 = 
    Tube(
    main_Translate_1_out_1,
    main_Tube_1_in_2,
    main_Tube_1_in_3,
    main_Tube_1_in_4
    ) [instance: 1, cache: 1];
// network: end of macro body
CacheScene(main_Image_5_in_1, main_Image_5_out_1, main_Image_5_out_2);
}
main_Import_1_in_1 = "viewer.dx.tmp";
main_Import_1_in_2 = NULL;
main_Import_1_in_3 = "dx";
main_Import_1_in_4 = NULL;
main_Import_1_in_5 = NULL;
main_Import_1_in_6 = NULL;
main_Import_1_out_1 = NULL;
main_Compute_11_in_1 = "mag($0)";
main_Compute_11_out_1 = NULL;
main_Switch_6_in_1 = 1;
main_Switch_6_out_1 = NULL;
main_Colormap_3_in_1 = { [0.0 0.666667] [1.0 0.0] };
main_Colormap_3_in_2 = { [0.0 1.0] [1.0 1.0] };
main_Colormap_3_in_3 = { [0.0 1.0] [1.0 1.0] };
main_Colormap_3_in_4 = { [0.0 1.0] [1.0 1.0] };
main_Colormap_3_in_5 = "Colormap_3";
main_Colormap_3_in_7 = NULL;
main_Colormap_3_in_8 = NULL;
main_Colormap_3_in_9 = NULL;
main_Colormap_3_in_10 = NULL;
main_Colormap_3_in_11 = NULL;
main_Colormap_3_in_12 = { 0.0 1.0 };
main_Colormap_3_in_13 = NULL;
main_Colormap_3_in_14 = NULL;
main_Colormap_3_in_15 = NULL;
main_Colormap_3_in_16 = NULL;
main_Colormap_3_in_17 = 0.0;
main_Colormap_3_in_18 = 1.0;
main_Colormap_3_in_19 = NULL;
main_Colormap_3_out_1 = NULL;
main_Color_2_in_3 = 1.0;
main_Color_2_in_4 = NULL;
main_Color_2_in_5 = NULL;
main_Color_2_out_1 = NULL;
main_MapToPlane_1_in_2 = [0 0 0.5];
main_MapToPlane_1_in_3 = NULL;
main_MapToPlane_1_out_1 = NULL;
main_Transmitter_11_out_1 = NULL;
main_Receiver_15_out_1 = NULL;
main_Collect_1_in_2 = NULL;
main_Collect_1_in_3 = NULL;
main_Collect_1_out_1 = NULL;
main_Transmitter_8_out_1 = NULL;
main_Receiver_14_out_1 = NULL;
main_Compute_9_in_1 = "[$0.x-1,$0.y]";
main_Compute_9_out_1 = NULL;
main_DivCurl_1_in_2 = NULL;
main_DivCurl_1_out_2 = NULL;
main_Compute_10_in_1 = "log(mag($0)+0.1)";
main_Compute_10_out_1 = NULL;
main_Grid_1_in_1 = [3 0];
main_Grid_1_in_2 = "rectangle";
main_Grid_1_in_3 = {[4 0.] [0 1.5]};
main_Grid_1_in_4 = {21 7};
main_Grid_1_out_1 = NULL;
macro Image(
        id,
        object,
        where,
        useVector,
        to,
        from,
        width,
        resolution,
        aspect,
        up,
        viewAngle,
        perspective,
        options,
        buttonState = 1,
        buttonUpApprox = "none",
        buttonDownApprox = "none",
        buttonUpDensity = 1,
        buttonDownDensity = 1,
        renderMode = 0,
        defaultCamera,
        reset,
        backgroundColor,
        throttle,
        RECenable = 0,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable = 0,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels,
        webOptions) -> (
        object,
        camera,
        where)
{
    ImageMessage(
        id,
        backgroundColor,
        throttle,
        RECenable,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels,
        interactionMode,
        title,
        renderMode,
        buttonUpApprox,
        buttonDownApprox,
        buttonUpDensity,
        buttonDownDensity) [instance: 1, cache: 1];
    autoCamera =
        AutoCamera(
            object,
            "front",
            object,
            resolution,
            aspect,
            [0,1,0],
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    realCamera =
        Camera(
            to,
            from,
            width,
            resolution,
            aspect,
            up,
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    coloredDefaultCamera = 
	 UpdateCamera(defaultCamera,
            background=backgroundColor) [instance: 1, cache: 1];
    nullDefaultCamera =
        Inquire(defaultCamera,
            "is null + 1") [instance: 1, cache: 1];
    resetCamera =
        Switch(
            nullDefaultCamera,
            coloredDefaultCamera,
            autoCamera) [instance: 1, cache: 1];
    resetNull = 
        Inquire(
            reset,
            "is null + 1") [instance: 2, cache: 1];
    reset =
        Switch(
            resetNull,
            reset,
            0) [instance: 2, cache: 1];
    whichCamera =
        Compute(
            "($0 != 0 || $1 == 0) ? 1 : 2",
            reset,
            useVector) [instance: 1, cache: 1];
    camera = Switch(
            whichCamera,
            resetCamera,
            realCamera) [instance: 3, cache: 1];
    AAobject =
        AutoAxes(
            object,
            camera,
            AAlabels,
            AAticks,
            AAcorners,
            AAframe,
            AAadjust,
            AAcursor,
            AAgrid,
            AAcolors,
            AAannotation,
            AAlabelscale,
            AAfont,
            AAxTickLocs,
            AAyTickLocs,
            AAzTickLocs,
            AAxTickLabels,
            AAyTickLabels,
            AAzTickLabels) [instance: 1, cache: 1];
    switchAAenable = Compute("$0+1",
	     AAenable) [instance: 2, cache: 1];
    object = Switch(
	     switchAAenable,
	     object,
	     AAobject) [instance:4, cache: 1];
    SWapproximation_options =
        Switch(
            buttonState,
            buttonUpApprox,
            buttonDownApprox) [instance: 5, cache: 1];
    SWdensity_options =
        Switch(
            buttonState,
            buttonUpDensity,
            buttonDownDensity) [instance: 6, cache: 1];
    HWapproximation_options =
        Format(
            "%s,%s",
            buttonDownApprox,
            buttonUpApprox) [instance: 1, cache: 1];
    HWdensity_options =
        Format(
            "%d,%d",
            buttonDownDensity,
            buttonUpDensity) [instance: 2, cache: 1];
    switchRenderMode = Compute(
	     "$0+1",
	     renderMode) [instance: 3, cache: 1];
    approximation_options = Switch(
	     switchRenderMode,
            SWapproximation_options,
	     HWapproximation_options) [instance: 7, cache: 1];
    density_options = Switch(
	     switchRenderMode,
            SWdensity_options,
            HWdensity_options) [instance: 8, cache: 1];
    renderModeString = Switch(
            switchRenderMode,
            "software",
            "hardware")[instance: 9, cache: 1];
    object_tag = Inquire(
            object,
            "object tag")[instance: 3, cache: 1];
    annoted_object =
        Options(
            object,
            "send boxes",
            0,
            "cache",
            1,
            "object tag",
            object_tag,
            "ddcamera",
            whichCamera,
            "rendering approximation",
            approximation_options,
            "render every",
            density_options,
            "button state",
            buttonState,
            "rendering mode",
            renderModeString) [instance: 1, cache: 1];
    RECresNull =
        Inquire(
            RECresolution,
            "is null + 1") [instance: 4, cache: 1];
    ImageResolution =
        Inquire(
            camera,
            "camera resolution") [instance: 5, cache: 1];
    RECresolution =
        Switch(
            RECresNull,
            RECresolution,
            ImageResolution) [instance: 10, cache: 1];
    RECaspectNull =
        Inquire(
            RECaspect,
            "is null + 1") [instance: 6, cache: 1];
    ImageAspect =
        Inquire(
            camera,
            "camera aspect") [instance: 7, cache: 1];
    RECaspect =
        Switch(
            RECaspectNull,
            RECaspect,
            ImageAspect) [instance: 11, cache: 1];
    switchRECenable = Compute(
          "$0 == 0 ? 1 : (($2 == $3) && ($4 == $5)) ? ($1 == 1 ? 2 : 3) : 4",
            RECenable,
            switchRenderMode,
            RECresolution,
            ImageResolution,
            RECaspect,
	     ImageAspect) [instance: 4, cache: 1];
    NoRECobject, RECNoRerenderObject, RECNoRerHW, RECRerenderObject = Route(switchRECenable, annoted_object);
    Display(
        NoRECobject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    image =
        Render(
            RECNoRerenderObject,
            camera) [instance: 1, cache: 1];
    Display(
        image,
        NULL,
        where,
        throttle) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    rec_where = Display(
        RECNoRerHW,
        camera,
        where,
        throttle) [instance: 1, cache: 0];
    rec_image = ReadImageWindow(
        rec_where) [instance: 1, cache: 1];
    WriteImage(
        rec_image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    RECupdateCamera =
	UpdateCamera(
	    camera,
	    resolution=RECresolution,
	    aspect=RECaspect) [instance: 2, cache: 1];
    Display(
        RECRerenderObject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    RECRerenderObject =
	ScaleScreen(
	    RECRerenderObject,
	    NULL,
	    RECresolution,
	    camera) [instance: 1, cache: 1];
    image =
        Render(
            RECRerenderObject,
            RECupdateCamera) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 2, cache: 1];
}
main_Image_5_in_1 = "Image_5";
main_Image_5_in_3 = "X16,,";
main_Image_5_in_4 = 1;
main_Image_5_in_5 = [0.5 0.5 0.5];
main_Image_5_in_6 = [3.9059 1.63679 2.96002];
main_Image_5_in_7 = 2.33249;
main_Image_5_in_8 = 776;
main_Image_5_in_9 = 0.682;
main_Image_5_in_10 = [-0.212943 0.965288 -0.151245];
main_Image_5_in_11 = NULL;
main_Image_5_in_12 = 0;
main_Image_5_in_13 = NULL;
main_Image_5_in_14 = 1;
main_Image_5_in_15 = NULL;
main_Image_5_in_16 = NULL;
main_Image_5_in_17 = NULL;
main_Image_5_in_18 = NULL;
main_Image_5_in_19 = 0;
main_Image_5_in_20 = NULL;
main_Image_5_in_21 = NULL;
main_Image_5_in_22 = NULL;
main_Image_5_in_23 = NULL;
main_Image_5_in_25 = NULL;
main_Image_5_in_26 = NULL;
main_Image_5_in_27 = NULL;
main_Image_5_in_28 = NULL;
main_Image_5_in_29 = NULL;
main_Image_5_in_30 = NULL;
main_Image_5_in_31 = NULL;
main_Image_5_in_32 = NULL;
main_Image_5_in_33 = NULL;
main_Image_5_in_34 = NULL;
main_Image_5_in_35 = NULL;
main_Image_5_in_36 = NULL;
main_Image_5_in_37 = NULL;
main_Image_5_in_38 = NULL;
main_Image_5_in_39 = NULL;
main_Image_5_in_40 = NULL;
main_Image_5_in_41 = "rotate";
main_Image_5_in_42 = NULL;
main_Image_5_in_43 = NULL;
main_Image_5_in_44 = NULL;
main_Image_5_in_45 = NULL;
main_Image_5_in_46 = NULL;
main_Image_5_in_47 = NULL;
main_Image_5_in_48 = NULL;
main_Image_5_in_49 = NULL;
main_Streamline_1_in_3 = NULL;
main_Streamline_1_in_4 = NULL;
main_Streamline_1_in_5 = NULL;
main_Streamline_1_in_6 = NULL;
main_Streamline_1_in_7 = NULL;
main_Streamline_1_out_1 = NULL;
main_Translate_1_in_2 = [0 0 1];
main_Translate_1_out_1 = NULL;
main_Tube_1_in_2 = 0.03;
main_Tube_1_in_3 = NULL;
main_Tube_1_in_4 = NULL;
Executive("product version 4 2 0");
$sync
main();
