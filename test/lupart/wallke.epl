<:
#require "$ENV{'PETSCFEM_DIR'}/test/eperlini.pl";       # Initializes ePerl 
# because when running the beta-1.82 version
# `octave-export_vars()' is not available. 
require "$ENV{'HOME'}/PETSC/petscfem/test/eperlini.pl";       # Initializes ePerl 
#
#$case = $ENV{'case'};
$L = 1;                         # Semi distance between plates
$N = 4;                        # Number of elements in transversal 'x' direction
$hratio = 1;                    # refinement near the wall
$hratioy = 1;                   # refinement to the exit
$Ny = 2;                       # Number of elements in y dir
$Ny_eq = 1;                     # last elements that are equal in size
                                # in the y direction
$Ly = 1;                        # longitudinal length 
$Re = 10000;                        # laminar Re
$Uav = 1;                       # 
$nu = $Uav*2*$L/$Re;            # kinematic visc.
$part_case = ($case =~ /^(.*)_part$/);
$part_method = $1;
$case_size = "medium" if $part_case;
$case_size = $ENV{'case_size'} unless $case_size;
if ($case_size eq 'small') {
$N = 4;                         # Number of elements in transversal 'x' direction
$Ny = 2;                        # Number of elements in y dir
$Ny_eq = 1;                     # last elements that are equal in size
                                # in the y direction
$Ly = 1;                        # longitudinal length 
} elsif ($case_size eq 'medium') {
$N = 16;                        # Number of elements in transversal 'x' direction
$Ny = 8;                        # Number of elements in y dir
$Ny_eq = 2;                     # last elements that are equal in size
                                # in the y direction
$Ly = 1;                        # longitudinal length 
}
octave_export_vars("data.m.tmp",qw(nu N Ny hratio hratioy 
    L Ly Ny_eq Uav ));
:>//                            # ends ePerl block

#case <:=$case:>
#part_case <:=$part_case:>

#default definitions
#===========================================================
global_options
ndim 2

save_file "save.state"
nsave 5

save_file_pattern "outvector%d.out"
nsaverot 1

initial_state "wallke.ini.tmp"
#initial_state "save.state"
print_some_file "wallke.some"
save_file_some "wallke.some.tmp"
nsome 1

alpha 1.
#if $case_size eq 'small'
nstep 2
nnwt 2
#elsif $part_case
nstep 1
nnwt 1
partitioning_method "<:=$part_method:>"
debug_element_partitioning
#else
nstep 200
nnwt 3
#endif
tol_newton 0
#if $case eq 'iisd' 
use_iisd
preco_type "none"
rtol 1e-4
atol 1e-10
maxits 100
#if $ENV{'ksp'} eq 'cgs' 
KSP_method "cgs"
#endif
#elsif $case eq "lu"
preco_type "lu"
maxits 1
#else
preco_type "jacobi"
rtol 1e-4
atol 1e-10
#if ! $part_case
maxits 10
#else 
maxits 1
#endif
#endif
Dt 1
steady
newton_relaxation_factor 1

print_internal_loop_conv
#verify_jacobian_with_numerical_one
#print_linear_system_and_stop
#solve_system 0
#print_dofmap_id

viscosity <:=$nu:>

# todavia no tenemos el weak form para k-e (???)
weak_form 0 

__END_HASH__

# ndim nu ndof
nodes   2  2  3
__INCLUDE__ wallke.nod.tmp
__END_NODES__

#===========================================================
elemset nsi_tet_les_fm2 4
geometry cartesian2d
npg 4
__END_HASH__
__INCLUDE__ wallke.con.tmp
__END_ELEMSET__

end_elemsets

#===========================================================
#if 1
fixa

# pressure fixed at some node
#:print (($Ny+1)*($N-1)+2):> 3  0.

# u velocity imposed to 0 in all the center line (right)
__INCLUDE__ wallke.u_0_right_wall.tmp

# u velocity imposed to 0 in all the left wall
__INCLUDE__ wallke.u0.tmp

# v velocity imposed to 0 in all the left wall
# in turbulent case this should be done via wall functions
__INCLUDE__ wallke.v_0_left_wall.tmp

# fix lateral (u) velocity to 0 at the outlet
__INCLUDE__ wallke.u_out_0.tmp

# fix pressure to 0 at the outlet
__INCLUDE__ wallke.p_out_0.tmp

# quantities at inlet 
__INCLUDE__ wallke.fixa_in.tmp

__END_FIXA__
#endif

#if 0
constraint
# fix u,v,k,e periodic at output
__INCLUDE__ wallke.fixa_out_peri.tmp
__END_CONSTRAINT__
#endif

#if 0
constraint
# ultimo nodo en la pared periodico en k y epsilon con respecto al anterior
-1. <:=$Ny+1:> 4 +1. <:=$Ny:> 4 
-1. <:=$Ny+1:> 5 +1. <:=$Ny:> 5 
__END_CONSTRAINT__
#endif

#if 0
constraint
# fix p to 0 at the outlet (weighted version) 
__INCLUDE__ wallke.wp_out_0.tmp
__END_CONSTRAINT__
#endif

#if 0
constraint
__INCLUDE__ wallke.peri.tmp
__END_CONSTRAINT__
#endif

# Local Variables: $
# mode: shell-script $
# eval: (setq indent-tabs-mode nil) $
# End: $
