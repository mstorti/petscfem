NAME
    odoc.pl - generate documentation for PETSc-FEM options in text-hashes

SYNOPSIS
        $ odoc.pl [OPTIONS] FILES ...

DESCRIPTION
    Options to programs, elemsets and other parts of `PETSc-FEM' are passed
    via text-hashes, which are then queried by the code via calles to
    functions in the `getopt' package. This is normally done via calls to
    the *GETOPT* macros. You can document the options so defined introducing
    special comments, for instance

      //o Use the weak form for the Galerkin part of the advective term. 
      SGETOPTDEF(int,weak_form,1);

    will generate a LaTeX entry in the form

        * int weak_form (default: 1) : Use the weak form for the Galerkin 
                           part of the advective term. 

    You can put almost any kind of LaTeX material in the embedded
    documentation. You must add a doc section for each *GETOPT* call and
    then execute

      $ odoc.pl -o doc.tex file1 file2 ...

    in order to obtain a doc.tex file.

SYNTAX
    The syntaxis of the embedded documentation is as follows:

        The embedded documentation must be in a block preceding the
        `*GETOPT*' call.

    *   Spanning doc blocks over more than one line: All lines following the
        the `//o' directive must start with `// ' (i.e. the `//' comment
        directive must be followed by a space. Lines starting by `//'
        followed by a non space character are 'special directives'.

    *   The `//i_tex' directive - Including large amount of LaTeX material:
        If you have a too large section then you can introduce a special
        line with a directive of the form `//i_tex' as, for instance

          //o Sets the frequency save for the ``rotary save'' mechanism. 
          //i_tex nsdoc.tex rotary_save
          GETOPTDEF(int,nsaverot,100);

        This will read the section `rotary_save' entry in the nsdoc.tex
        file. The section in the nsdoc.tex file are the lines between a line
        containing `%section rotary_save' and `%end_section'

           .... % other sections 

           %section rotary_save
           This section shows how to ...
           ...
           %end_section

           .... % other sections 

    *   Including explicit doc sections: If the `*GETOPT*' call is too
        complicated or the `getopt' functions (as `get_int', `get_double',
        etc...) have been called explicitly, then you can include explicit
        doc sections where you explicitly give the different fields of the
        entries (`type', `name', `default', `doc'). You enter them in the
        following way

            //o _T: double[ndim]/double[ndim*ndof]/double[ndim*ndof*ndof] 
            //  _N: advective_jacobians _D: no default  _DOC: 
            //i_tex advdif.tex advective_jacobians
            //  _END

        i.e., they are delimited by the *magic strings* `_T:', `_N:', `_D:',
        `_DOC:', `_END', in that order. You can put several fields in the
        same line. You can use the `//i_tex' inside the `_DOC:' block.

    *   Not documented `*GETOPT*' calls: If `odoc.pl' finds a `*GETOPT*'
        call that doesn't have a previous `//o' block, a warnng is issued.
        If you want to suppress this warning add a `//nd' after the
        `*GETOPT*' call as, for instance

           TGETOPTDEF(GLOBAL_OPTIONS,double,alpha,1.); //nd

OPTIONS
    -s section_name
        Process the specified section name in the `*.cpp' source file.
        Sections are delimited by `//target section_name' and `//end_target'
        lines. For instance:

          // Contents of file `myprg.cpp'
          //target common_options
          ....
          //end_target

          //target specific_option
          ....
          //end_target

        then will be able to write

           $ odoc.pl -s common_options myprg.cpp

    -o outputfile
        Put the generated LaTeX documentation in file `outputfile'.

    -h  Give help.

AUTHOR
    Mario A. Storti <mstorti@intec.unl.edu.ar>

