; -*- mode: lisp -*-

(setq c-macro-preprocessor "/home/mstorti/PETSC/petscfem-pfmat/tools/pfcpp")
;
(setq c-macro-preprocessor (concat (getenv "PETSCFEM_DIR") 
				   "/tools/pfcpp"))
(defun match-paren (arg)
  "Go to the matching parenthesis if on parenthesis otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
	((looking-at "\\s\)") (forward-char 1) (backward-list 1))
	(t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

(defalias 'create-fun-hdr
      (read-kbd-macro "C-x C-x M-w Y DEL C-y <left> 2*DEL \" C-x C-x \" <left> RET <up> $fun SPC DEL C-x C-s"))
;;
(setq next-line-add-newlines nil) ; para que no apendice lineas
(defun fastmat2-print()
  (interactive)
  (let ((ident (buffer-substring 
		(+ (re-search-backward "[^0-9a-zA-Z_]") 1)
		(+ (re-search-forward 
		    "[^0-9a-zA-Z_]" (point-max-marker) t 2) -1)
		)))
    (switch-to-buffer "*gud*")
    (insert "p " ident ".print(\"\"),1")
    (comint-send-input)
    )
  )
;;
;;
(add-hook 'c++-mode-hook '(lambda () 
      (abbrev-mode 1)
      (auto-fill-mode)
;      (local-set-key "\C-cc" 'compile)
      (local-set-key "\C-ck" 'kill-compilation)
      (local-set-key [f10] 'fastmat2-print)
      (setq current-pos-regexp "^ *// Current line ===========")
       ))
;;
;; Reemplazar identificadores
;;
(defun query-replace-identifier()
  (interactive)
  (query-replace-regexp (concat "\\([^a-zA-Z_]\\)"
				(read-from-minibuffer "replace identifier: ") 
				"\\([^a-zA-Z0-9_]\\)")
			(concat "\\1" (read-from-minibuffer "with: ") 
				 "\\2")
			)
)
;
; This way it works for any kind of machine name
;
(defalias 'notas-insert-date (read-kbd-macro
			      "%=== <<date>> C-e SPC C-u ESC !uname SPC -n RET <down> C-k \
<up> C-e C-r SPC RET <right> C-u ESC !whoami RET <down> C-a DEL @ C-e <down>"))

;;
;;
(defalias 'pqpq
  (read-kbd-macro "C-x n n <home> <home> C-SPC <end> C-x C-x C-M-% , SPC * C-q LFD RET C-q LFD RET ! <home> ESC % , RET C-q LFD RET ! <end> C-x n w C-e ;"))

;; global binding
(global-set-key "\C-cr" 'toggle-read-only)
;; para configurar make

;;  (read-kbd-macro "C-x n n <home> C-M-% , SPC * C-q LFD RET ! RET <home> ESC % , RET C-q LFD RET ! RET <home> C-x n w"))
;;; para que recupere bien en debugger
(setq comint-prompt-regexp "^\\((gdb) \\|[^#$%>\n]*[#$%>] *\\)")
;;
(setq current-pos-regexp "^\\s-*[^\\s-][^\\s-][^\\s-] Current line ===========")
