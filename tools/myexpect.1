.\" Automatically generated by Pod::Man version 1.02
.\" Sun Apr  8 09:24:38 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "MYEXPECT 1"
.TH MYEXPECT 1 "perl v5.6.0" "2001-04-08" "User Contributed Perl Documentation"
.UC
.SH "NAME"
myexpext.pl: verifies output from program tests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`expect(FILE,MESSAGE,checklist)\*(C'\fR verifies reads each pattern line in
checklist and finds lines in \s-1FILE\s0 that matches this pattern.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The simplest way of using \f(CW\*(C`expect()\*(C'\fR is to write a list of patterns
that should be found in the output of the test. Suppose the output
contains:
.PP
.Vb 8
\&  Output run of program QBFG running on day Sun Apr  8 08:48:23 ART 2001
\&  ..... more lines here
\&  Total volume: 34.56
\&  more lines here...
\&  Total area: 23.43
\&  more lines here...
\&  Total impedance: 46.4
\&  more lines here...
.Ve
You yount to chech that the figures in lines \f(CW\*(C`Total...\*(C'\fR are precise
to the first digit. The ouput is in file \f(CW\*(C`QBFG.out\*(C'\fR and you write a
small perl program like this
.PP
.Vb 1
\&   #!/usr/bin/perl
.Ve
.Vb 1
\&   require 'myexpect.pl';
.Ve
.Vb 5
\&   expect("QBFG.out","Check on ouput of QBFG.out",<<'EOT');
\&   Total volume: 34.5
\&   Total area: 23.4
\&   Total impedance: 4
\&   EOT
.Ve
.Vb 1
\&   final_check();
.Ve
In the default mode, \f(CW\*(C`expexct()\*(C'\fR takes the first pattern at a time
and starts scanning the file from the beginning, each lie at a time
until it finds a line that matches the pattern. Patterns are the usual
Perl patterns. So that remember to escape asterisks '\f(CW\*(C`*\*(C'\fR', question
marks '\f(CW\*(C`?\*(C'\fR', dots and others. You can leave the dot unescaped since
it matches itself, but the pattern is less strict (dot matches any
other character also).  Normally, when entering patterns with a \fIhere
in\fR document, as in the previous example, you protect the backslash
characters in the pattern list using quotes in the \f(CW\*(C`'EOT'\*(C'\fR
terminator.
.PP
If the pattern is not found an error is reported and the test is
counted as a failure. If a line matching is found, \f(CW\*(C`expect()\*(C'\fR takes
the folowing pattern and continue scanning the file from the line
following the previous match. If all the patterns are matched, then
the test is counted as a succes. If \f(CW\*(C`FILE\*(C'\fR can't be opened, then this
is reported separately from error. The final count is reported by a
call to \f(CW\*(C`final_check()\*(C'\fR.
.PP
You can alter this default behavior adding \fImagic tokens\fR in
the pattern list. The magic tokens are
.Ip "_\|_REWIND_\|_" 4
.IX Item "__REWIND__"
Rewind the file, i.e. scan for the next match starting from the
beginning of the file, rather than from the last match. This is useful
when you don't know exactly the order in which the lines will appear.
For instance file
.Sp
.Vb 5
\&   #------ contents of file test1.out
\&   line at the beginning
\&   ...
\&   other line 
\&   ...
.Ve
matches the following call
.Sp
.Vb 5
\&   expect("test1.out","Check on ouput of test1.out",<<'EOT');
\&   other line 
\&   __REWIND__
\&   line at the beginning
\&   EOT
.Ve
thanks to the presence of the \f(CW\*(C`_\|_REWIND_\|_\*(C'\fR directive. 
.Ip "_\|_BACKWARD_\|_" 4
.IX Item "__BACKWARD__"
Scan the file backward for the next and subsequent patterns.
.Ip "_\|_FORWARD_\|_" 4
.IX Item "__FORWARD__"
Cancel the \f(CW\*(C`_\|_BACKWARD_\|_\*(C'\fR directive and continue scanning forward. 
.Ip "_\|_NO_SKIP_\|_" 4
.IX Item "__NO_SKIP__"
In no-skip mode the following pattern is found to match with exactly
the following line, rather to scan the file from the following line
down. 
.Ip "_\|_SKIP_\|_" 4
.IX Item "__SKIP__"
Return to skip mode. 
.SH "AUTHOR"
.IX Header "AUTHOR"
Mario A. Storti <mstorti@intec.unl.edu.ar>
