.\" Automatically generated by Pod::Man version 1.02
.\" Sat Jan 13 08:05:13 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "MAKEWHAT 1"
.TH MAKEWHAT 1 "perl v5.6.0" "2001-01-13" "User Contributed Perl Documentation"
.UC
.SH "NAME"
.Vb 1
\&    makewhat.pl - Prints info on targets extracted from Makefiles
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $ makewhat.pl [options] <makefiles> ...
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.Ip "\-h" 4
.IX Item "-h"
give help
.Ip "\-s" 4
.IX Item "-s"
Sort entries alphabetically in a given section
.Ip "\-m <magic_prefix>" 4
.IX Item "-m <magic_prefix>"
Set the magic prefix. 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Add a comment just above the corresponding target in a Makefile in the form
.PP
.Vb 5
\&    #w Builds the library and 
\&    #w cleans the directory
\&    buildclean: 
\&            commands
\&            ...
.Ve
Then when running \f(CW\*(C`makewhat.pl\*(C'\fR it scans the makefiles, strips this
comments and prints somethinng like
.PP
.Vb 3
\&    '$ make buildclean'   :  Builds the library and
\&                             cleans the directory
\&    '$ make other_target' :  Other description here ...
.Ve
Usually, one inserts a target of the form
.PP
.Vb 3
\&     #w Prints info on targets
\&     what:
\&            @makewhat.pl Makefile Makefile.base
.Ve
So that a user can do
.PP
.Vb 1
\&    $ make what
.Ve
.Vb 2
\&    'make buildclean'  :  Builds the library a
\&                          cleans the directory
.Ve
.Vb 1
\&    'make other_target' :  Other description here ...
.Ve
.Vb 1
\&    'make what'  : Prints info on targets
.Ve
Leading whitespace in \f(CW\*(C`#w\*(C'\fR lines is removed. If you want to preserve
it, start with a '>' sign. Leading whitespace until the '>' is
removed and the line is taken literally beginning at the character
following the '>' sign.
.Sh "Other directives"
.IX Subsection "Other directives"
.Ip "Sections" 4
.IX Item "Sections"
Lines of the form
.Sp
.Vb 1
\&  #s Section name
.Ve
separate targets in 'sections'. If sorting is enabled (option \f(CW\*(C`\-s\*(C'\fR)
then targets are sorted within each section. A target with no section
name flushes the target list.
.Ip "Textual lines" 4
.IX Item "Textual lines"
Lines starting with \f(CW\*(C`#p\*(C'\fR are printed textually (the \f(CW\*(C`#p\*(C'\fR is
stripped) and printed out as the file is parsed. This is used to print
banners and legends like \f(CW\*(C`[In file path/to/subdir/Makefile]\*(C'\fR. 
.Ip "Change target and nonexistent targets" 4
.IX Item "Change target and nonexistent targets"
A line starting with \f(CW\*(C`#e name\*(C'\fR is equivalent to finding a target of
the form \f(CW\*(C`name:\*(C'\fR so that a target message can be generated with a
block of comments of the form
.Sp
.Vb 4
\&   #w This is a dummy target
\&   #w and will be reported even if there is not
\&   #w a real target
\&   #e dummy
.Ve
This would print
.Sp
.Vb 3
\&  '$ make dummy' : This is a dummy target
\&                   and will be reported even if there is not
\&                   a real target
.Ve
This can be also used for replacing the name of the target. For instance targets of the form 
.Sp
.Vb 3
\& #w Converts file.a to file.b
\& %.b: %.a
\&         myconvert $< $@
.Ve
would generate a message of the form 
.Sp
.Vb 1
\& '$ make %.b' :        Converts file.a to file.b
.Ve
It is more readable to use
.Sp
.Vb 4
\& #w Converts file.a to file.b
\& #e file.b
\& %.b: %.a
\&         myconvert $< $@
.Ve
which would generate
.Sp
.Vb 1
\& '$ make file.b' :     Converts file.a to file.b
.Ve
instead.
.Ip "Insert Perl code" 4
.IX Item "Insert Perl code"
A line of the form \f(CW\*(C`#v perl\-code\*(C'\fR causes \f(CW\*(C`perl\-code\*(C'\fR to be evaled,
and allows the user to change some parmeters. For instance
.RS 4
.Ip "\f(CW\*(C`$hdrmxlen\*(C'\fR [default 22]" 4
.IX Item "$hdrmxlen [default 22]"
The length of the target part of the message. Subsequent lines are indented this amount. 
.Ip "\f(CW\*(C`$hdrpat\*(C'\fR [default \f(CW\*(C`'\e\e\e$ make \e$target' : \*(C'\fR]" 4
.IX Item "$hdrpat [default '$ make $target' : ]"
The target part is printed with this pattern. Note that this string
has to be double escaped, since it is interpolated twice. 
.RE
.RS 4
.RE
.Sh "Changing the magic prefix"
.IX Subsection "Changing the magic prefix"
If you think that the \f(CW\*(C`#letter\*(C'\fR commands are too
loose, then you can add some magic prefix so that the commands are now
\&\f(CW\*(C`#{magic\-prefix}letter\*(C'\fR. For instance if you set \f(CW\*(C`\-m MKW\*(C'\fR in the
options then the commands are now \f(CW\*(C`#MKWw\*(C'\fR, \f(CW\*(C`#MKWs\*(C'\fR, etc... Note that
this string will be evaluated in a pattern environment so that escape
characters like \f(CW\*(C`*.?/\*(C'\fR etc...
.Sh ""
.IX Subsection ""
.SH "AUTHOR"
.IX Header "AUTHOR"
Mario A. Storti <mstorti@intec.unl.edu.ar>
