#!/usr/bin/perl
#__INSERT_LICENSE__
#$Id: makeltag,v 1.15 2004/10/24 21:59:50 mstorti Exp $

sub ask {
    my $ans;
    my $text = shift();
    print "$text (y/n [default y]) > ";
    $ans = <STDIN>;
    chomp $ans;
    die "Aborting... \n" if $ans =~ /n/i;
}

## usage: insertbef <text>, <file>, <regexp>,<skip>;
## Insert <text> in <file> before line containing <regexp>. 
## If <skip> is true then insert <text> before all blank lines prior
## to regexp. 
sub insertbef {
    my ($text,$file,$pos_rgxp,$skip) = @_;
    rename $file, "$file~";
    open FOLD,"$file~";
    open FNEW,">$file";
    my @queue = ();
    while (<FOLD>) {
	if (/^\s*$/) { push @queue; next; }
	else {
	    print FNEW "$text\n" if /^$pos_rgxp/;
	    print FNEW @queue;
	    @queue = ();
	    print FNEW;
	}
    }
    close FNEW;
    close FOLD;
}

$save_log = shift();
$notes = shift();
$tmp = "./tmp_file_log.txt.tmp";

system "echo n | cvs rel .";
ask "\nContinue ? ";
$|=1;

open SVL,"$save_log";
print "Last tags :\n";
@svl=();
my $use_pl = 0;
while (<SVL>) {
    push @svl,$_ if /^tag/;
    if (/^tag:\s*(\S*\.\S*\.)(pl)?(\d*)/) {
	($last_tag,$pl_flag,$pl) = ($1,$2,$3);
	if ($pl_flag eq 'pl') { $use_pl = 1; }
	else { $use_pl = 0; }
    } elsif (/^tag:\s*(\S*)\s/) {
	$last_tag = $1.".";
	$pl = 0;
    }
}
close SVL;
$n = $#svl-10;
$n = 0 if $n<0;
for ($j=$n; $j<=$#svl; $j++) { print $svl[$j]; }

$new_tag = $last_tag.($use_pl ? "pl" : "").($pl+1);
print "Enter new tag: [def $new_tag]> ";
$newtag = <STDIN>;
chomp $newtag;
if (! $newtag) {
    $newtag = $new_tag;
}
$newtag_ = $newtag;
$newtag =~ s/\-/--/g; 
$newtag =~ s/\./-/g;

print "Encoded tag \"$newtag\"\n";
my $pl_flag = ($use_pl ? '-p' : '-P');
system "./tools/checktag -l $pl_flag $newtag_ ./save.log";
ask "\nContinue ? ";

print "Now I will launch the editor in order\n",
    "    to enter a log message for this release...\n",
    "    <press enter to continue>\n";
<STDIN>;
system "\$EDITOR $tmp";

open SVL,">>$save_log";
print SVL "----------\n"; # >> $savelog;
$d = `date --rfc-822`;
chomp $d;
$w = `whoami`;
chomp $w;
$h = `hostname -f`;
chomp $h;
print SVL "tag: $newtag_ on $d by $w in $h\n";
open TMP,"$tmp";
while (<TMP>) {
    print SVL "     > $_";
}
close TMP;
if ( -f $tmp) {
    unlink $tmp;
}

# system "cat $tmp >>save.log";
close SVL;

# Insert a tag in `notes' file
insertbef "----------\n[tag: $newtag_ on $d by $w in $h]\n",
    $notes, ".*Current line ===========" if $notes;

open VRS,">VERSION";
print VRS $newtag_;
close VRS;

print "logging on $save_log\n";

system "cvs ci -m \"Administrative files\" notes.txt save.log VERSION";

/`/;
=cut

    
makeltag: A tool for performing light CVS tags

* A 'light tag' (ltag) is simply a date and a branch (currently the
  light version doesn't store the branch, so be careful). You can make
  a lot of ltags because they are very cheap (only the date and branch
  are stored in a 'save.log' file). 

* The file 'VERSION' stores the last ltag. 

In order to use 'makeltag' do the following steps. 

* Add a target like this to the main Makefile:

    #w Makes a new (light) release
    ltag:
           makeltag save.log
* Add a file 'save.log' to the main directory with a line like this. 

    $Id: makeltag,v 1.15 2004/10/24 21:59:50 mstorti Exp $
    ----------
    tag: coal-0.0 on Wed, 10 Dec 2003 20:04:36 -0300 by mstorti in node1.beowulf.gtm

The only important thing here is the 'coal' identifier. the remining
information is useless, you will discard it in the first ltag.

* Add a VERSION file to the main directory with something like this

    coal-0.0.0

* Add (cvs add) and commit (cvs ci ) VERSION and save.log

* do a 'make ltag' in the main directory. 

    [mstorti@spider DECANTA]$ make ltag
    makeltag save.log
    M save.log
    You have [1] altered files in this repository.
    Are you sure you want to release directory '.': ** 'release' aborted by user choice.
    
    Continue ?  (y/n [default y]) > <RET>
    Last tags :
    tag: coal-0.0 on Wed, 10 Dec 2003 20:04:36 -0300 by mstorti in node1.beowulf.gtm
    Enter new tag: [def coal-0.0.1]> 
    Encoded tag "coal--0-0-1"
    
    Continue ?  (y/n [default y]) > <RET>
    Now I will launch the editor in order
        to enter a log message for this release...
        <press enter to continue>
    <EDIT FILE WITH COMMENTS FOR THIS LTAG>
    Waiting for Emacs...Done
    logging on save.log
    Checking in save.log;
    /home/mstorti/cvsroot/decanta/save.log,v  <--  save.log
    new revision: 1.2; previous revision: 1.1
    done
    [mstorti@spider DECANTA]$ 

=cut
/`/;
